<Project>
  <PropertyGroup>
    <!-- Used to silence the warning caused by the workaround for https://github.com/dotnet/runtime/issues/81382 -->
    <SuppressGenerateILCompilerExplicitPackageReferenceWarning>true</SuppressGenerateILCompilerExplicitPackageReferenceWarning>
  </PropertyGroup>
  <!-- needed to reference a specific version of NetCoreApp. Workaround https://github.com/dotnet/runtime/issues/81382 -->
  <ItemGroup>
    <FrameworkReference
      Update="Microsoft.NETCore.App"
      RuntimeFrameworkVersion="$(MicrosoftNETCoreAppRuntimeVersion)"
    />
    <PackageReference
      Include="Microsoft.DotNet.ILCompiler"
      Version="$(MicrosoftNETCoreAppRuntimeVersion)"
    />
    <!-- Workaround when there is no vNext SDK available; copy known packs info from 8.0. -->
    <KnownAppHostPack
      Include="@(KnownAppHostPack-&gt;WithMetadataValue('TargetFramework', 'net8.0'))"
      TargetFramework="$(TargetFramework)"
      Condition="'@(KnownAppHostPack-&gt;Count())' != '0' AND
                                 !(@(KnownAppHostPack-&gt;AnyHaveMetadataValue('TargetFramework', '$(TargetFramework)')))&quot;
    />
    <KnownRuntimePack
      Include="
    />
    <KnownRuntimePack
      Include="@(KnownRuntimePack-&gt;WithMetadataValue('TargetFramework', 'net8.0'))"
      TargetFramework="$(TargetFramework)"
      Condition="'@(KnownRuntimePack-&gt;Count())' != '0' AND
                                 !(@(KnownRuntimePack-&gt;AnyHaveMetadataValue('TargetFramework', '$(TargetFramework)')))&quot;
    />
    <KnownFrameworkReference
      Include="
    />
    <KnownFrameworkReference
      Include="@(KnownFrameworkReference-&gt;WithMetadataValue('TargetFramework', 'net8.0'))"
      TargetFramework="$(TargetFramework)"
      Condition="'@(KnownFrameworkReference-&gt;Count())' != '0' AND
                                 !(@(KnownFrameworkReference-&gt;AnyHaveMetadataValue('TargetFramework', '$(TargetFramework)')))&quot;
    />
    <KnownILLinkPack
      Include="
    />
    <KnownILLinkPack
      Include="@(KnownILLinkPack-&gt;WithMetadataValue('TargetFramework', 'net8.0'))"
      TargetFramework="$(TargetFramework)"
      Condition="'@(KnownILLinkPack-&gt;Count())' != '0' AND
                                 !(@(KnownILLinkPack-&gt;AnyHaveMetadataValue('TargetFramework', '$(TargetFramework)')))&quot;
    />
    <KnownILCompilerPack
      Include="
    />
    <KnownILCompilerPack
      Include="@(KnownILCompilerPack-&gt;WithMetadataValue('TargetFramework', 'net8.0'))"
      TargetFramework="$(TargetFramework)"
      Condition="'@(KnownILCompilerPack-&gt;Count())' != '0' AND
                                 !(@(KnownILCompilerPack-&gt;AnyHaveMetadataValue('TargetFramework', '$(TargetFramework)')))&quot;
    />
    <KnownFrameworkReference Update="
    />
    <KnownFrameworkReference Update="Microsoft.NETCore.App">
      <LatestRuntimeFrameworkVersion Condition=" '%(TargetFramework)' == '$(TargetFramework)' "
        >$(MicrosoftNETCoreAppRuntimeVersion)</LatestRuntimeFrameworkVersion
      >
      <TargetingPackVersion Condition=" '%(TargetFramework)' == '$(TargetFramework)' "
        >$(MicrosoftNETCoreAppRefVersion)</TargetingPackVersion
      >
      <!--
        Change the default shared framework version only when _not_ servicing. Avoid bumping version used in most
        projects. When servicing, projects (Microsoft.AspNetCore.App.Runtime in particular) can use
        $(TargetLatestRuntimePatch) to explicitly control whether assemblies build against default (false) or
        latest (true). When that property is not set, SDK uses default metadata in most cases but published apps
        e.g. tool projects (again, property not set) use latest.
      -->
      <DefaultRuntimeFrameworkVersion
        Condition=" '$(IsServicingBuild)' != 'true' AND
          '%(TargetFramework)' == '$(TargetFramework)'&quot;
        >$(MicrosoftNETCoreAppRuntimeVersion)</DefaultRuntimeFrameworkVersion
      >
      <RuntimePackRuntimeIdentifiers Condition="
        >$(MicrosoftNETCoreAppRuntimeVersion)</DefaultRuntimeFrameworkVersion
      >
      <RuntimePackRuntimeIdentifiers Condition=" '$(PortableBuild)' == 'false' "
        >$(TargetRuntimeIdentifier)</RuntimePackRuntimeIdentifiers
      >
    </KnownFrameworkReference>
    <KnownAppHostPack Update="Microsoft.NETCore.App">
      <AppHostPackVersion Condition=" '%(TargetFramework)' == '$(TargetFramework)' "
        >$(MicrosoftNETCoreAppRuntimeVersion)</AppHostPackVersion
      >
      <AppHostRuntimeIdentifiers Condition=" '$(PortableBuild)' == 'false' "
        >$(TargetRuntimeIdentifier)</AppHostRuntimeIdentifiers
      >
    </KnownAppHostPack>
    <KnownRuntimePack Update="Microsoft.NETCore.App">
      <LatestRuntimeFrameworkVersion Condition=" '%(TargetFramework)' == '$(TargetFramework)' "
        >$(MicrosoftNETCoreAppRuntimeVersion)</LatestRuntimeFrameworkVersion
      >
      <AppHostRuntimeIdentifiers Condition=" '$(PortableBuild)' == 'false' "
        >$(TargetRuntimeIdentifier)</AppHostRuntimeIdentifiers
      >
    </KnownRuntimePack>
  </ItemGroup>
  <!--
  Reference the Microsoft.AspNetCore.App shared framework assemblies with ProjectReference.
  This allows for easy dev workflow. Just need to update the product code, and re-run the tests.
  -->
  <ItemGroup>
    <ProjectReference Include="$(RepoRoot)src\DefaultBuilder\src\Microsoft.AspNetCore.csproj" />
    <ProjectReference Include="$(RepoRoot)src\DataProtection\Extensions\src\Microsoft.AspNetCore.DataProtection.Extensions.csproj" />
  </ItemGroup>
</Project>
