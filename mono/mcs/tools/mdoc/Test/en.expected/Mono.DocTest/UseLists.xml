<Type Name="UseLists" FullName="Mono.DocTest.UseLists">
  <TypeSignature Language="C#" Value="public class UseLists" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit UseLists extends System.Object"
  />
  <TypeSignature Language="DocId" Value="T:Mono.DocTest.UseLists" />
  <TypeSignature Language="VB.NET" Value="Public Class UseLists" />
  <TypeSignature Language="F#" Value="type UseLists = class" />
  <TypeSignature
    Language="JavaScript"
    Value="function UseLists()"
    Usage="var useLists = new UseLists();"
  />
  <TypeSignature Language="C++ CLI" Value="public ref class UseLists" />
  <TypeSignature
    Language="C++ WINRT"
    Value="[Windows::Foundation::Metadata::WebHostHidden]
class UseLists"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseLists ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.UseLists.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature
        Language="JavaScript"
        Value="function UseLists()"
        Usage="var useLists = new UseLists();"
      />
      <MemberSignature Language="C++ CLI" Value="public:
 UseLists();" />
      <MemberSignature Language="C++ CX" Value="public:
 UseLists();" />
      <MemberSignature Language="C++ WINRT" Value=" UseLists();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValues<T>">
      <MemberSignature
        Language="C#"
        Value="public Mono.DocTest.Generic.MyList<T> GetValues<T> (T value) where T : struct;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class Mono.DocTest.Generic.MyList`1<!!T> GetValues<struct .ctor (class System.ValueType) T>(!!T value) cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.UseLists.GetValues``1(``0)" />
      <MemberSignature
        Language="VB.NET"
        Value="Public Function GetValues(Of T As Structure) (value As T) As MyList(Of T)"
      />
      <MemberSignature
        Language="F#"
        Value="member this.GetValues : 'T -> Mono.DocTest.Generic.MyList<'T (requires 'T : struct)> (requires 'T : struct)"
        Usage="useLists.GetValues value"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
 where T : value class Mono::DocTest::Generic::MyList<T> ^ GetValues(T value);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.DocTest.Generic.MyList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (Mono.DocTest.Generic.MyList<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class Mono.DocTest.Generic.MyList`1<int32> list) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.UseLists.Process(Mono.DocTest.Generic.MyList{System.Int32})"
      />
      <MemberSignature Language="VB.NET" Value="Public Sub Process (list As MyList(Of Integer))" />
      <MemberSignature
        Language="F#"
        Value="member this.Process : Mono.DocTest.Generic.MyList<int> -> unit"
        Usage="useLists.Process list"
      />
      <MemberSignature
        Language="JavaScript"
        Value="function process(list)"
        Usage="useLists.process(list)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 void Process(Mono::DocTest::Generic::MyList<int> ^ list);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Mono.DocTest.Generic.MyList<System.Int32>" />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (System.Collections.Generic.List<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class System.Collections.Generic.List`1<int32> list) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.UseLists.Process(System.Collections.Generic.List{System.Int32})"
      />
      <MemberSignature Language="VB.NET" Value="Public Sub Process (list As List(Of Integer))" />
      <MemberSignature
        Language="F#"
        Value="member this.Process : System.Collections.Generic.List<int> -> unit"
        Usage="useLists.Process list"
      />
      <MemberSignature
        Language="JavaScript"
        Value="function process(list)"
        Usage="useLists.process(list)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 void Process(System::Collections::Generic::List<int> ^ list);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List<System.Int32>" />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (System.Collections.Generic.List<Predicate<int>> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class System.Collections.Generic.List`1<class System.Predicate`1<int32>> list) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.UseLists.Process(System.Collections.Generic.List{System.Predicate{System.Int32}})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Public Sub Process (list As List(Of Predicate(Of Integer)))"
      />
      <MemberSignature
        Language="F#"
        Value="member this.Process : System.Collections.Generic.List<Predicate<int>> -> unit"
        Usage="useLists.Process list"
      />
      <MemberSignature
        Language="JavaScript"
        Value="function process(list)"
        Usage="useLists.process(list)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 void Process(System::Collections::Generic::List<Predicate<int> ^> ^ list);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="list"
          Type="System.Collections.Generic.List<System.Predicate<System.Int32>>"
        />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Process<T>">
      <MemberSignature
        Language="C#"
        Value="public void Process<T> (System.Collections.Generic.List<Predicate<T>> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process<T>(class System.Collections.Generic.List`1<class System.Predicate`1<!!T>> list) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.UseLists.Process``1(System.Collections.Generic.List{System.Predicate{``0}})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Public Sub Process(Of T) (list As List(Of Predicate(Of T)))"
      />
      <MemberSignature
        Language="F#"
        Value="member this.Process : System.Collections.Generic.List<Predicate<'T>> -> unit"
        Usage="useLists.Process list"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
 void Process(System::Collections::Generic::List<Predicate<T> ^> ^ list);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List<System.Predicate<T>>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelper<T,U,V>">
      <MemberSignature
        Language="C#"
        Value="public void UseHelper<T,U,V> (Mono.DocTest.Generic.MyList<T>.Helper<U,V> helper);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void UseHelper<T, U, V>(class Mono.DocTest.Generic.MyList`1/Helper`2<!!T, !!U, !!V> helper) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.UseLists.UseHelper``3(Mono.DocTest.Generic.MyList`1.Helper{``0,``1,``2})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Public Sub UseHelper(Of T, U, V) (helper As MyList(Of T).Helper(Of U, V))"
      />
      <MemberSignature
        Language="F#"
        Value="member this.UseHelper : Mono.DocTest.Generic.MyList<'T>.Helper<'U, 'V> -> unit"
        Usage="useLists.UseHelper helper"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T, typename U, typename V>
 void UseHelper(Mono::DocTest::Generic::MyList<T>::Helper<U, V> ^ helper);"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="template <typename T, typename U, typename V>
 void UseHelper(Mono::DocTest::Generic::MyList<T>::Helper<U, V> const & helper);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
        <TypeParameter Name="V" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="helper" Type="Mono.DocTest.Generic.MyList<T>+Helper<U,V>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <typeparam name="U">To be added.</typeparam>
        <typeparam name="V">To be added.</typeparam>
        <param name="helper">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
