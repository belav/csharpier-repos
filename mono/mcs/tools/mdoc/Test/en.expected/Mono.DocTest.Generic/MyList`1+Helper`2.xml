<Type Name="MyList<T>+Helper<U,V>" FullName="Mono.DocTest.Generic.MyList<T>+Helper<U,V>">
  <TypeSignature Language="C#" Value="public class MyList<T>.Helper<U,V>" />
  <TypeSignature
    Language="ILAsm"
    Value=".class nested public auto ansi beforefieldinit MyList`1/Helper`2<T, U, V> extends System.Object"
  />
  <TypeSignature Language="DocId" Value="T:Mono.DocTest.Generic.MyList`1.Helper`2" />
  <TypeSignature Language="VB.NET" Value="Public Class MyList(Of T).Helper(Of U, V)" />
  <TypeSignature Language="F#" Value="type MyList<'T>.Helper<'U, 'V> = class" />
  <TypeSignature
    Language="C++ CLI"
    Value="public: generic <typename U, typename V>&#010;ref class MyList<T>::Helper"
  />
  <TypeSignature
    Language="C++ WINRT"
    Value="template <typename U, typename V>&#010;[Windows::Foundation::Metadata::WebHostHidden]&#010;class MyList<T>::Helper"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName>Mono.DocTest.Doc("Type Parameter!")</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
    <TypeParameter Name="U" />
    <TypeParameter Name="V" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="U">To be added.</typeparam>
    <typeparam name="V">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Helper ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.Helper`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#010; Helper();" />
      <MemberSignature Language="C++ CX" Value="public:&#010; Helper();" />
      <MemberSignature Language="C++ WINRT" Value=" Helper();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseT">
      <MemberSignature Language="C#" Value="public void UseT (T a, U b, V c);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void UseT(!T a, !U b, !V c) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`1.Helper`2.UseT(`0,`1,`2)"
      />
      <MemberSignature Language="VB.NET" Value="Public Sub UseT (a As T, b As U, c As V)" />
      <MemberSignature
        Language="F#"
        Value="member this.UseT : 'T * 'U * 'V -> unit"
        Usage="helper.UseT (a, b, c)"
      />
      <MemberSignature Language="C++ CLI" Value="public:&#010; void UseT(T a, U b, V c);" />
      <MemberSignature Language="C++ CX" Value="public:&#010; void UseT(T a, U b, V c);" />
      <MemberSignature Language="C++ WINRT" Value="void UseT(T a, U b, V c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="T" />
        <Parameter Name="b" Type="U" />
        <Parameter Name="c" Type="V" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <param name="c">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
