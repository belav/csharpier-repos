<Type Name="Extensions" FullName="Mono.DocTest.Generic.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object"
  />
  <TypeSignature Language="DocId" Value="T:Mono.DocTest.Generic.Extensions" />
  <TypeSignature Language="VB.NET" Value="Public Module Extensions" />
  <TypeSignature Language="F#" Value="type Extensions = class" />
  <TypeSignature Language="C++ CLI" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="C++ CX" Value="public ref class Extensions abstract sealed" />
  <TypeSignature Language="C++ WINRT" Value="class Extensions abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Bar<T>">
      <MemberSignature
        Language="C#"
        Value="public static void Bar<T> (this Mono.DocTest.Generic.IFoo<T> self, string s);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig void Bar<T>(class Mono.DocTest.Generic.IFoo`1<!!T> self, string s) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.Extensions.Bar``1(Mono.DocTest.Generic.IFoo{``0},System.String)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="<Extension()>
Public Sub Bar(Of T) (self As IFoo(Of T), s As String)"
      />
      <MemberSignature
        Language="F#"
        Value="static member Bar : Mono.DocTest.Generic.IFoo<'T> * string -> unit"
        Usage="Mono.DocTest.Generic.Extensions.Bar (self, s)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
[System::Runtime::CompilerServices::Extension]
 static void Bar(Mono::DocTest::Generic::IFoo<T> ^ self, System::String ^ s);"
      />
      <MemberSignature
        Language="C++ CX"
        Value="public:
generic <typename T>
[System::Runtime::CompilerServices::Extension]
 static void Bar(Mono::DocTest::Generic::IFoo<T> ^ self, Platform::String ^ s);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="Mono.DocTest.Generic.IFoo<T>" RefType="this" />
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach<T>">
      <MemberSignature
        Language="C#"
        Value="public static void ForEach<T> (this System.Collections.Generic.IEnumerable<T> self, Action<T> a);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig void ForEach<T>(class System.Collections.Generic.IEnumerable`1<!!T> self, class System.Action`1<!!T> a) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="<Extension()>
Public Sub ForEach(Of T) (self As IEnumerable(Of T), a As Action(Of T))"
      />
      <MemberSignature
        Language="F#"
        Value="static member ForEach : seq<'T> * Action<'T> -> unit"
        Usage="Mono.DocTest.Generic.Extensions.ForEach (self, a)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
[System::Runtime::CompilerServices::Extension]
 static void ForEach(System::Collections::Generic::IEnumerable<T> ^ self, Action<T> ^ a);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="System.Collections.Generic.IEnumerable<T>" RefType="this" />
        <Parameter Name="a" Type="System.Action<T>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <param name="a">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<double> ToDouble (this System.Collections.Generic.IEnumerable<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<float64> ToDouble(class System.Collections.Generic.IEnumerable`1<int32> list) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.Extensions.ToDouble(System.Collections.Generic.IEnumerable{System.Int32})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="<Extension()>
Public Function ToDouble (list As IEnumerable(Of Integer)) As IEnumerable(Of Double)"
      />
      <MemberSignature
        Language="F#"
        Value="static member ToDouble : seq<int> -> seq<double>"
        Usage="Mono.DocTest.Generic.Extensions.ToDouble list"
      />
      <MemberSignature
        Language="JavaScript"
        Value="function toDouble(list)"
        Usage="var iEnumerable = Mono.DocTest.Generic.Extensions.toDouble(list)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
[System::Runtime::CompilerServices::Extension]
 static System::Collections::Generic::IEnumerable<double> ^ ToDouble(System::Collections::Generic::IEnumerable<int> ^ list);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable<System.Double></ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="list"
          Type="System.Collections.Generic.IEnumerable<System.Int32>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble<T>">
      <MemberSignature
        Language="C#"
        Value="public static double ToDouble<T> (this T val) where T : Mono.DocTest.Generic.IFoo<T>;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 ToDouble<(class Mono.DocTest.Generic.IFoo`1<!!T>) T>(!!T val) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.Extensions.ToDouble``1(``0)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="<Extension()>
Public Function ToDouble(Of T As IFoo(Of T)) (val As T) As Double"
      />
      <MemberSignature
        Language="F#"
        Value="static member ToDouble : 'T -> double (requires 'T :> Mono.DocTest.Generic.IFoo<'T>)"
        Usage="Mono.DocTest.Generic.Extensions.ToDouble val"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
 where T : Mono::DocTest::Generic::IFoo<T>[System::Runtime::CompilerServices::Extension]
 static double ToDouble(T val);"
      />
      <MemberSignature
        Language="C++ CX"
        Value="public:
generic <typename T>
 where T : Mono::DocTest::Generic::IFoo<T>[System::Runtime::CompilerServices::Extension]
 static double ToDouble(T val);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Mono.DocTest.Generic.IFoo<T></InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="val" Type="T" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="val">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable<T>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<T> ToEnumerable<T> (this T self);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!T> ToEnumerable<T>(!!T self) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.Extensions.ToEnumerable``1(``0)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="<Extension()>
Public Iterator Function ToEnumerable(Of T) (self As T) As IEnumerable(Of T)"
      />
      <MemberSignature
        Language="F#"
        Value="static member ToEnumerable : 'T -> seq<'T>"
        Usage="Mono.DocTest.Generic.Extensions.ToEnumerable self"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename T>
[System::Runtime::CompilerServices::Extension]
 static System::Collections::Generic::IEnumerable<T> ^ ToEnumerable(T self);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName
            >System.Runtime.CompilerServices.IteratorStateMachine(typeof(Mono.DocTest.Generic.Extensions/<ToEnumerable>d__0`1))</AttributeName
          >
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable<T></ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="T" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
