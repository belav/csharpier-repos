<Type Name="MyList<A,B>" FullName="Mono.DocTest.Generic.MyList<A,B>">
  <TypeSignature
    Language="C#"
    Value="public class MyList<A,B> : Mono.DocTest.Generic.GenericBase<System.Collections.Generic.Dictionary<A,B>>, Mono.DocTest.Generic.IFoo<A>, System.Collections.Generic.ICollection<A>, System.Collections.Generic.IEnumerable<A>, System.Collections.Generic.IEnumerator<A> where A : class, IList<B>, new() where B : class, A"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit MyList`2<class .ctor (class System.Collections.Generic.IList`1<!B>) A, class (!A) B> extends Mono.DocTest.Generic.GenericBase`1<class System.Collections.Generic.Dictionary`2<!A, !B>> implements class Mono.DocTest.Generic.IFoo`1<!A>, class System.Collections.Generic.ICollection`1<!A>, class System.Collections.Generic.IEnumerable`1<!A>, class System.Collections.Generic.IEnumerator`1<!A>, class System.Collections.IEnumerable, class System.Collections.IEnumerator, class System.IDisposable"
  />
  <TypeSignature Language="DocId" Value="T:Mono.DocTest.Generic.MyList`2" />
  <TypeSignature
    Language="VB.NET"
    Value="Public Class MyList(Of A, B)
Inherits GenericBase(Of Dictionary(Of A, B))
Implements ICollection(Of A), IEnumerable(Of A), IEnumerator(Of A), IFoo(Of A)"
  />
  <TypeSignature
    Language="F#"
    Value="type MyList<'A, #'A (requires 'A : null and 'A :> IList<#'A> and 'A : (new : unit -> 'A))> = class
    inherit GenericBase<Dictionary<'A, #'A>>
    interface seq<'A (requires 'A : null and 'A :> IList<#'A> and 'A : (new : unit -> 'A))>
    interface IEnumerable
    interface IEnumerator<'A (requires 'A : null and 'A :> IList<#'A> and 'A : (new : unit -> 'A))>
    interface IDisposable
    interface IEnumerator
    interface ICollection<'A (requires 'A : null and 'A :> IList<#'A> and 'A : (new : unit -> 'A))>
    interface IFoo<'A (requires 'A : null and 'A :> IList<#'A> and 'A : (new : unit -> 'A))>"
  />
  <TypeSignature
    Language="C++ CLI"
    Value="generic <typename A, typename B>
 where A : class, IList<B>, gcnew() where B : class, Apublic ref class MyList : Mono::DocTest::Generic::GenericBase<System::Collections::Generic::Dictionary<A, B> ^>, Mono::DocTest::Generic::IFoo<A>, System::Collections::Generic::ICollection<A>, System::Collections::Generic::IEnumerable<A>, System::Collections::Generic::IEnumerator<A>"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="A">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>System.Collections.Generic.IList&lt;B&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="B">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <BaseTypeName>A</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Mono.DocTest.Generic.GenericBase&lt;System.Collections.Generic.Dictionary&lt;A,B&gt;&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="U"
        >System.Collections.Generic.Dictionary&lt;A,B&gt;</BaseTypeArgument
      >
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.DocTest.Generic.IFoo&lt;A&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;A&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;A&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;A&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="A">To be added.</typeparam>
    <typeparam name="B">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MyList ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:
 MyList();" />
      <MemberSignature Language="C++ CX" Value="public:
 MyList();" />
      <MemberSignature Language="C++ WINRT" Value=" MyList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (A[] array, int arrayIndex);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void CopyTo(!A[] array, int32 arrayIndex) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.CopyTo(`0[],System.Int32)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Public Sub CopyTo (array As A(), arrayIndex As Integer)"
      />
      <MemberSignature
        Language="F#"
        Value="abstract member CopyTo : 'A[] * int -> unit
override this.CopyTo : 'A[] * int -> unit"
        Usage="myList.CopyTo (array, arrayIndex)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 virtual void CopyTo(cli::array <A> ^ array, int arrayIndex);"
      />
      <MemberSignature
        Language="C++ CX"
        Value="public:
 void CopyTo(Platform::Array <A> ^ array, int arrayIndex);"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="void CopyTo(std::Array <A> const & array, int arrayIndex);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="A[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Mono.DocTest.Generic.MyList`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature
        Language="F#"
        Value="member this.Count : int"
        Usage="Mono.DocTest.Generic.MyList<'A, #'A (requires 'A : null and 'A :> System.Collections.Generic.IList<#'A> and 'A : (new : unit -> 'A))>.Count"
      />
      <MemberSignature Language="C++ CLI" Value="public:
 property int Count { int get(); };" />
      <MemberSignature Language="C++ CX" Value="public:
 property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public A Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !A Current" />
      <MemberSignature Language="DocId" Value="P:Mono.DocTest.Generic.MyList`2.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As A" />
      <MemberSignature
        Language="F#"
        Value="member this.Current : 'A"
        Usage="Mono.DocTest.Generic.MyList<'A, #'A (requires 'A : null and 'A :> System.Collections.Generic.IList<#'A> and 'A : (new : unit -> 'A))>.Current"
      />
      <MemberSignature Language="C++ CLI" Value="public:
 property A Current { A get(); };" />
      <MemberSignature Language="C++ CX" Value="public:
 property A Current { A get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void Dispose() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature
        Language="F#"
        Value="abstract member Dispose : unit -> unit
override this.Dispose : unit -> unit"
        Usage="myList.Dispose "
      />
      <MemberSignature Language="C++ CLI" Value="public:
 virtual void Dispose();" />
      <MemberSignature Language="C++ CX" Value="public:
 void Dispose();" />
      <MemberSignature Language="C++ WINRT" Value="void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Foo">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.KeyValuePair<System.Collections.Generic.IEnumerable<A>,System.Collections.Generic.IEnumerable<B>> Foo ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance valuetype System.Collections.Generic.KeyValuePair`2<class System.Collections.Generic.IEnumerable`1<!A>, class System.Collections.Generic.IEnumerable`1<!B>> Foo() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.Foo" />
      <MemberSignature
        Language="VB.NET"
        Value="Public Function Foo () As KeyValuePair(Of IEnumerable(Of A), IEnumerable(Of B))"
      />
      <MemberSignature
        Language="F#"
        Value="member this.Foo : unit -> System.Collections.Generic.KeyValuePair<seq<'A>, seq<#'A>>"
        Usage="myList.Foo "
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 System::Collections::Generic::KeyValuePair<System::Collections::Generic::IEnumerable<A> ^, System::Collections::Generic::IEnumerable<B> ^> Foo();"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.KeyValuePair&lt;System.Collections.Generic.IEnumerable&lt;A&gt;,System.Collections.Generic.IEnumerable&lt;B&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.List<A>.Enumerator GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator<!A> GetEnumerator() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.GetEnumerator" />
      <MemberSignature
        Language="VB.NET"
        Value="Public Function GetEnumerator () As List(Of A).Enumerator"
      />
      <MemberSignature
        Language="F#"
        Value="member this.GetEnumerator : unit -> System.Collections.Generic.List<'A (requires 'A : null and 'A :> System.Collections.Generic.IList<#'A> and 'A : (new : unit -> 'A))>.Enumerator"
        Usage="myList.GetEnumerator "
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 System::Collections::Generic::List<A>::Enumerator GetEnumerator();"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;A&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mono.DocTest.Generic.IFoo<A>.Method<U>">
      <MemberSignature Language="C#" Value="A IFoo<A>.Method<U> (A a, U u);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance !A Mono.DocTest.Generic.IFoo<A>.Method<U>(!A a, !!U u) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.Mono#DocTest#Generic#IFoo{A}#Method``1(`0,``0)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="generic <typename U>
 virtual A Mono.DocTest.Generic.IFoo<A>.Method(A a, U u) = Mono::DocTest::Generic::IFoo<A>::Method;"
      />
      <MemberSignature
        Language="C++ CX"
        Value="generic <typename U>
 virtual A Mono.DocTest.Generic.IFoo<A>.Method(A a, U u) = Mono::DocTest::Generic::IFoo<A>::Method;"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="template <typename U>
 A Mono.DocTest.Generic.IFoo<A>.Method(A a, U u);"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.DocTest.Generic.IFoo`1.Method``1(`0,``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="A" />
        <Parameter Name="u" Type="U" />
      </Parameters>
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <param name="a">To be added.</param>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature
        Language="F#"
        Value="abstract member MoveNext : unit -> bool
override this.MoveNext : unit -> bool"
        Usage="myList.MoveNext "
      />
      <MemberSignature Language="C++ CLI" Value="public:
 virtual bool MoveNext();" />
      <MemberSignature Language="C++ CX" Value="public:
 bool MoveNext();" />
      <MemberSignature Language="C++ WINRT" Value="bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void Reset() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`2.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature
        Language="F#"
        Value="abstract member Reset : unit -> unit
override this.Reset : unit -> unit"
        Usage="myList.Reset "
      />
      <MemberSignature Language="C++ CLI" Value="public:
 virtual void Reset();" />
      <MemberSignature Language="C++ CX" Value="public:
 void Reset();" />
      <MemberSignature Language="C++ WINRT" Value="void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Add">
      <MemberSignature Language="C#" Value="void ICollection<A>.Add (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection<A>.Add(!A item) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#ICollection{A}#Add(`0)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Sub Add (item As A) Implements ICollection(Of A).Add"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual void System.Collections.Generic.ICollection<A>.Add(A item) = System::Collections::Generic::ICollection<A>::Add;"
      />
      <MemberSignature
        Language="C++ CX"
        Value=" virtual void System.Collections.Generic.ICollection<A>.Add(A item) = System::Collections::Generic::ICollection<A>::Add;"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="void System.Collections.Generic.ICollection<A>.Add(A item);"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Clear">
      <MemberSignature Language="C#" Value="void ICollection<A>.Clear ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection<A>.Clear() cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#ICollection{A}#Clear"
      />
      <MemberSignature Language="VB.NET" Value="Sub Clear () Implements ICollection(Of A).Clear" />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual void System.Collections.Generic.ICollection<A>.Clear() = System::Collections::Generic::ICollection<A>::Clear;"
      />
      <MemberSignature
        Language="C++ CX"
        Value=" virtual void System.Collections.Generic.ICollection<A>.Clear() = System::Collections::Generic::ICollection<A>::Clear;"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="void System.Collections.Generic.ICollection<A>.Clear();"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Contains">
      <MemberSignature Language="C#" Value="bool ICollection<A>.Contains (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection<A>.Contains(!A item) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#ICollection{A}#Contains(`0)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Function Contains (item As A) As Boolean Implements ICollection(Of A).Contains"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual bool System.Collections.Generic.ICollection<A>.Contains(A item) = System::Collections::Generic::ICollection<A>::Contains;"
      />
      <MemberSignature
        Language="C++ CX"
        Value=" virtual bool System.Collections.Generic.ICollection<A>.Contains(A item) = System::Collections::Generic::ICollection<A>::Contains;"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="bool System.Collections.Generic.ICollection<A>.Contains(A item);"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.IsReadOnly">
      <MemberSignature
        Language="C#"
        Value="bool System.Collections.Generic.ICollection<A>.IsReadOnly { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance bool System.Collections.Generic.ICollection<A>.IsReadOnly"
      />
      <MemberSignature
        Language="DocId"
        Value="P:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#ICollection{A}#IsReadOnly"
      />
      <MemberSignature
        Language="VB.NET"
        Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of A).IsReadOnly"
      />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection<A>.IsReadOnly" />
      <MemberSignature
        Language="C++ CLI"
        Value="property bool System::Collections::Generic::ICollection<A>::IsReadOnly { bool get(); };"
      />
      <MemberSignature
        Language="C++ CX"
        Value="property bool System::Collections::Generic::ICollection<A>::IsReadOnly { bool get(); };"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Remove">
      <MemberSignature Language="C#" Value="bool ICollection<A>.Remove (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection<A>.Remove(!A item) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#ICollection{A}#Remove(`0)"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Function Remove (item As A) As Boolean Implements ICollection(Of A).Remove"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual bool System.Collections.Generic.ICollection<A>.Remove(A item) = System::Collections::Generic::ICollection<A>::Remove;"
      />
      <MemberSignature
        Language="C++ CX"
        Value=" virtual bool System.Collections.Generic.ICollection<A>.Remove(A item) = System::Collections::Generic::ICollection<A>::Remove;"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="bool System.Collections.Generic.ICollection<A>.Remove(A item);"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable<A>.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.Generic.IEnumerator<A> IEnumerable<A>.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1<!A> System.Collections.Generic.IEnumerable<A>.GetEnumerator() cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#IEnumerable{A}#GetEnumerator"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Function GetEnumerator () As IEnumerator(Of A) Implements IEnumerable(Of A).GetEnumerator"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual System::Collections::Generic::IEnumerator<A> ^ System.Collections.Generic.IEnumerable<A>.GetEnumerator() = System::Collections::Generic::IEnumerable<A>::GetEnumerator;"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;A&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerator<A>.Current">
      <MemberSignature
        Language="C#"
        Value="A System.Collections.Generic.IEnumerator<A>.Current { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance !A System.Collections.Generic.IEnumerator<A>.Current"
      />
      <MemberSignature
        Language="DocId"
        Value="P:Mono.DocTest.Generic.MyList`2.System#Collections#Generic#IEnumerator{A}#Current"
      />
      <MemberSignature
        Language="VB.NET"
        Value=" ReadOnly Property Current As A Implements IEnumerator(Of A).Current"
      />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IEnumerator<A>.Current" />
      <MemberSignature
        Language="C++ CLI"
        Value="property A System::Collections::Generic::IEnumerator<A>::Current { A get(); };"
      />
      <MemberSignature
        Language="C++ CX"
        Value="property A System::Collections::Generic::IEnumerator<A>::Current { A get(); };"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`2.System#Collections#IEnumerable#GetEnumerator"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature
        Language="C#"
        Value="object System.Collections.IEnumerator.Current { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance object System.Collections.IEnumerator.Current"
      />
      <MemberSignature
        Language="DocId"
        Value="P:Mono.DocTest.Generic.MyList`2.System#Collections#IEnumerator#Current"
      />
      <MemberSignature
        Language="VB.NET"
        Value=" ReadOnly Property Current As Object Implements IEnumerator.Current"
      />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberSignature
        Language="C++ CLI"
        Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };"
      />
      <MemberSignature
        Language="C++ CX"
        Value="property Platform::Object ^ System::Collections::IEnumerator::Current { Platform::Object ^ get(); };"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
