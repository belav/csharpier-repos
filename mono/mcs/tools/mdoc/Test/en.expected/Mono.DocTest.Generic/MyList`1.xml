<Type Name="MyList<T>" FullName="Mono.DocTest.Generic.MyList<T>">
  <TypeSignature
    Language="C#"
    Value="public class MyList<T> : Mono.DocTest.Generic.GenericBase<T>, System.Collections.Generic.IEnumerable<int[]>"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit MyList`1<T> extends Mono.DocTest.Generic.GenericBase`1<!T> implements class System.Collections.Generic.IEnumerable`1<int32[]>, class System.Collections.IEnumerable"
  />
  <TypeSignature Language="DocId" Value="T:Mono.DocTest.Generic.MyList`1" />
  <TypeSignature
    Language="VB.NET"
    Value="Public Class MyList(Of T)
Inherits GenericBase(Of T)
Implements IEnumerable(Of Integer())"
  />
  <TypeSignature
    Language="F#"
    Value="type MyList<'T> = class
    inherit GenericBase<'T>
    interface seq<int[]>
    interface IEnumerable"
  />
  <TypeSignature
    Language="C++ CLI"
    Value="generic <typename T>
public ref class MyList : Mono::DocTest::Generic::GenericBase<T>, System::Collections::Generic::IEnumerable<cli::array <int> ^>"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Attributes>
        <Attribute>
          <AttributeName>Mono.DocTest.Doc("Type Parameter!")</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Mono.DocTest.Generic.GenericBase&lt;T&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="U">T</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Int32[]&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MyList ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:
 MyList();" />
      <MemberSignature Language="C++ CX" Value="public:
 MyList();" />
      <MemberSignature Language="C++ WINRT" Value=" MyList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.IEnumerator<int[]> GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1<int32[]> GetEnumerator() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.GetEnumerator" />
      <MemberSignature
        Language="VB.NET"
        Value="Public Function GetEnumerator () As IEnumerator(Of Integer())"
      />
      <MemberSignature
        Language="F#"
        Value="abstract member GetEnumerator : unit -> System.Collections.Generic.IEnumerator<int[]>
override this.GetEnumerator : unit -> System.Collections.Generic.IEnumerator<int[]>"
        Usage="myList.GetEnumerator "
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
 virtual System::Collections::Generic::IEnumerator<cli::array <int> ^> ^ GetEnumerator();"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Int32[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHelper<U,V>">
      <MemberSignature
        Language="C#"
        Value="public Mono.DocTest.Generic.MyList<T>.Helper<U,V> GetHelper<U,V> ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class Mono.DocTest.Generic.MyList`1/Helper`2<!T, !!U, !!V> GetHelper<U, V>() cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.GetHelper``2" />
      <MemberSignature
        Language="VB.NET"
        Value="Public Function GetHelper(Of U, V) () As MyList(Of T).Helper(Of U, V)"
      />
      <MemberSignature
        Language="F#"
        Value="member this.GetHelper : unit -> Mono.DocTest.Generic.MyList<'T>.Helper<'U, 'V>"
        Usage="myList.GetHelper "
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename U, typename V>
 Mono::DocTest::Generic::MyList<T>::Helper<U, V> ^ GetHelper();"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="template <typename U, typename V>
 Mono::DocTest::Generic::MyList<T>::Helper<U, V> GetHelper();"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.DocTest.Generic.MyList&lt;T&gt;+Helper&lt;U,V&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
        <TypeParameter Name="V" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <typeparam name="V">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Method<U>">
      <MemberSignature Language="C#" Value="public void Method<U> (T t, U u);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Method<U>(!T t, !!U u) cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.Method``1(`0,``0)" />
      <MemberSignature
        Language="F#"
        Value="member this.Method : 'T * 'U -> unit"
        Usage="myList.Method (t, u)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename U>
 void Method(T t, U u);"
      />
      <MemberSignature
        Language="C++ CX"
        Value="public:
generic <typename U>
 void Method(T t, U u);"
      />
      <MemberSignature Language="C++ WINRT" Value="template <typename U>
 void Method(T t, U u);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="T" />
        <Parameter Name="u" Type="U" />
      </Parameters>
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <param name="t">To be added.</param>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefMethod<U>">
      <MemberSignature Language="C#" Value="public void RefMethod<U> (ref T t, ref U u);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void RefMethod<U>(!T& t, !!U& u) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`1.RefMethod``1(`0@,``0@)"
      />
      <MemberSignature
        Language="F#"
        Value="member this.RefMethod :  *  -> unit"
        Usage="myList.RefMethod (t, u)"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename U>
 void RefMethod(T % t, U % u);"
      />
      <MemberSignature
        Language="C++ CX"
        Value="public:
generic <typename U>
 void RefMethod(T &  t, U &  u);"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="template <typename U>
 void RefMethod(T & t, U & u);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="T" RefType="ref" />
        <Parameter Name="u" Type="U" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <param name="t">To be added.</param>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`1.System#Collections#IEnumerable#GetEnumerator"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator"
      />
      <MemberSignature
        Language="C++ CLI"
        Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Test">
      <MemberSignature Language="C#" Value="public void Test (T t);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Test(!T t) cil managed"
      />
      <MemberSignature Language="DocId" Value="M:Mono.DocTest.Generic.MyList`1.Test(`0)" />
      <MemberSignature Language="F#" Value="member this.Test : 'T -> unit" Usage="myList.Test t" />
      <MemberSignature Language="C++ CLI" Value="public:
 void Test(T t);" />
      <MemberSignature Language="C++ CX" Value="public:
 void Test(T t);" />
      <MemberSignature Language="C++ WINRT" Value="void Test(T t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="T" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseHelper<U,V>">
      <MemberSignature
        Language="C#"
        Value="public void UseHelper<U,V> (Mono.DocTest.Generic.MyList<T>.Helper<U,V> helper);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void UseHelper<U, V>(class Mono.DocTest.Generic.MyList`1/Helper`2<!T, !!U, !!V> helper) cil managed"
      />
      <MemberSignature
        Language="DocId"
        Value="M:Mono.DocTest.Generic.MyList`1.UseHelper``2(Mono.DocTest.Generic.MyList`1.Helper{`0,``0,``1})"
      />
      <MemberSignature
        Language="VB.NET"
        Value="Public Sub UseHelper(Of U, V) (helper As MyList(Of T).Helper(Of U, V))"
      />
      <MemberSignature
        Language="F#"
        Value="member this.UseHelper : Mono.DocTest.Generic.MyList<'T>.Helper<'U, 'V> -> unit"
        Usage="myList.UseHelper helper"
      />
      <MemberSignature
        Language="C++ CLI"
        Value="public:
generic <typename U, typename V>
 void UseHelper(Mono::DocTest::Generic::MyList<T>::Helper<U, V> ^ helper);"
      />
      <MemberSignature
        Language="C++ WINRT"
        Value="template <typename U, typename V>
 void UseHelper(Mono::DocTest::Generic::MyList<T>::Helper<U, V> const & helper);"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
        <TypeParameter Name="V" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="helper" Type="Mono.DocTest.Generic.MyList<T>+Helper<U,V>" />
      </Parameters>
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <typeparam name="V">To be added.</typeparam>
        <param name="helper">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
