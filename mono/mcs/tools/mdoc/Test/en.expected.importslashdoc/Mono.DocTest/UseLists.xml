<Type Name="UseLists" FullName="Mono.DocTest.UseLists">
  <TypeSignature Language="C#" Value="public class UseLists" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit UseLists extends System.Object"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>
      <c>T:Mono.DocTest.UseLists</c>

      .</remarks
    >
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UseLists ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValues<T>">
      <MemberSignature
        Language="C#"
        Value="public Mono.DocTest.Generic.MyList<T> GetValues<T> (T value) where T : struct;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class Mono.DocTest.Generic.MyList`1<!!T> GetValues<struct .ctor (class System.ValueType) T>(!!T value) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.DocTest.Generic.MyList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">Something</typeparam>
        <param name="value"
          >A <c
          >T</c>

          .</param
        >
        <summary>To be added.</summary>
        <returns
          >A <see
           cref="T:Mono.DocTest.Generic.MyList`1" />

           instance.</returns
        >
        <remarks>
          <c>M:Mono.DocTest.UseLists.GetValues``1(``0)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (Mono.DocTest.Generic.MyList<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class Mono.DocTest.Generic.MyList`1<int32> list) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="Mono.DocTest.Generic.MyList<System.Int32>" />
      </Parameters>
      <Docs>
        <param name="list"
          >A <see
           cref="T:Mono.DocTest.Generic.MyList{System.Int32}" />

          .</param
        >
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.UseLists.Process(Mono.DocTest.MyList{System.Int32})</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (System.Collections.Generic.List<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class System.Collections.Generic.List`1<int32> list) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List<System.Int32>" />
      </Parameters>
      <Docs>
        <param name="list"
          >Another <see
           cref="T:Mono.DocTest.Generic.MyList{System.Int32}" />

          .</param
        >
        <summary>To be added.</summary>
        <remarks>
          <para>
            <c>M:Mono.DocTest.UseLists.Process(System.Collections.Generic.List{System.Int32})</c>

            .</para
          >
          <para>
            <see cref="M:System.Collections.Generic.List{System.Int32}.Remove(`0)" />
          </para>
        </remarks>
        <exception cref="Whatever">text!</exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature
        Language="C#"
        Value="public void Process (System.Collections.Generic.List<Predicate<int>> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process(class System.Collections.Generic.List`1<class System.Predicate`1<int32>> list) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="list"
          Type="System.Collections.Generic.List<System.Predicate<System.Int32>>"
        />
      </Parameters>
      <Docs>
        <param name="list"
          >A <see
           cref="T:Mono.DocTest.Generic.MyList{System.Predicate{System.Int32}}" />

          .</param
        >
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.UseLists.Process(System.Collections.Generic.List{System.Predicate{System.Int32}})</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Process<T>">
      <MemberSignature
        Language="C#"
        Value="public void Process<T> (System.Collections.Generic.List<Predicate<T>> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void Process<T>(class System.Collections.Generic.List`1<class System.Predicate`1<!!T>> list) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.List<System.Predicate<T>>" />
      </Parameters>
      <Docs>
        <typeparam name="T">Something Else</typeparam>
        <param name="list"
          >A <see
           cref="T:Mono.DocTest.Generic.MyList{System.Predicate{``0}}" />

          .</param
        >
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.UseLists.Process``1(System.Collections.Generic.List{System.Predicate{``0}})</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="UseHelper<T,U,V>">
      <MemberSignature
        Language="C#"
        Value="public void UseHelper<T,U,V> (Mono.DocTest.Generic.MyList<T>.Helper<U,V> helper);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance void UseHelper<T, U, V>(class Mono.DocTest.Generic.MyList`1/Helper`2<!!T, !!U, !!V> helper) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
        <TypeParameter Name="V" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="helper" Type="Mono.DocTest.Generic.MyList<T>+Helper<U,V>" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <c>T</c>
        </typeparam>
        <typeparam name="U">
          <c>U</c>
        </typeparam>
        <typeparam name="V">
          <c>V</c>
        </typeparam>
        <param name="helper"
          >A <see
           cref="T:Mono.DocTest.Generic.MyList{``0}.Helper{``1,``2}" />

          .</param
        >
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.UseLists.UseHelper``3(Mono.DocTest.Generic.MyList{``0}.Helper{``1,``2})</c>

          .</remarks
        >
      </Docs>
    </Member>
  </Members>
</Type>
