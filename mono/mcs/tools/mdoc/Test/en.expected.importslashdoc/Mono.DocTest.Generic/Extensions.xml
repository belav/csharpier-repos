<Type Name="Extensions" FullName="Mono.DocTest.Generic.Extensions">
  <TypeSignature Language="C#" Value="public static class Extensions" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi abstract sealed beforefieldinit Extensions extends System.Object"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>extension methods!</summary>
    <remarks>
      <c>T:Mono.DocTest.Generic.Extensions</c>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Bar<T>">
      <MemberSignature
        Language="C#"
        Value="public static void Bar<T> (this Mono.DocTest.Generic.IFoo<T> self, string s);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig void Bar<T>(class Mono.DocTest.Generic.IFoo`1<!!T> self, string s) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="Mono.DocTest.Generic.IFoo<T>" RefType="this" />
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <param name="s">To be added.</param>
        <summary>
          <see cref="T:Mono.DocTest.Generic.IFoo`1" />

           extension method</summary
        >
        <remarks>
          <c>M:Mono.DocTest.Generic.Extensions.Bar``1</c>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForEach<T>">
      <MemberSignature
        Language="C#"
        Value="public static void ForEach<T> (this System.Collections.Generic.IEnumerable<T> self, Action<T> a);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig void ForEach<T>(class System.Collections.Generic.IEnumerable`1<!!T> self, class System.Action`1<!!T> a) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="System.Collections.Generic.IEnumerable<T>" RefType="this" />
        <Parameter Name="a" Type="System.Action<T>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <param name="a">To be added.</param>
        <summary>
          <see cref="T:System.Collections.Generic.IEnumerable`1" />

           extension method</summary
        >
        <remarks>
          <c>M:Mono.DocTest.Generic.Extensions.ForEach``1</c>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<double> ToDouble (this System.Collections.Generic.IEnumerable<int> list);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<float64> ToDouble(class System.Collections.Generic.IEnumerable`1<int32> list) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable<System.Double></ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="list"
          Type="System.Collections.Generic.IEnumerable<System.Int32>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>
          <see cref="T:System.Collections.Generic.IEnumerable{System.Int32}" />

           
              extension method.
            </summary
        >
        <returns>To be added.</returns>
        <remarks>
          <c>M:Mono.DocTest.Generic.Extensions.ToDouble</c>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble<T>">
      <MemberSignature
        Language="C#"
        Value="public static double ToDouble<T> (this T val) where T : Mono.DocTest.Generic.IFoo<T>;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 ToDouble<(class Mono.DocTest.Generic.IFoo`1<!!T>) T>(!!T val) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Mono.DocTest.Generic.IFoo<T></InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="val" Type="T" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="val">To be added.</param>
        <summary>
          <see cref="T:Mono.DocTest.Generic.IFoo`1" />

           extension method.
            </summary
        >
        <returns>To be added.</returns>
        <remarks>
          <c>M:Mono.DocTest.Generic.Extensions.ToDouble</c>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable<T>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<T> ToEnumerable<T> (this T self);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!T> ToEnumerable<T>(!!T self) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName
            >System.Runtime.CompilerServices.IteratorStateMachine(typeof(Mono.DocTest.Generic.Extensions/<ToEnumerable>d__0`1))</AttributeName
          >
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable<T></ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="self" Type="T" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="self">To be added.</param>
        <summary>
          <c>System.Object</c>

           extension method</summary
        >
        <returns>To be added.</returns>
        <remarks>
          <c>M:Mono.DocTest.Generic.Extensions.ToEnumerable``1</c>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
