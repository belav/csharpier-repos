<Type Name="MyList<A,B>" FullName="Mono.DocTest.Generic.MyList<A,B>">
  <TypeSignature
    Language="C#"
    Value="public class MyList<A,B> : Mono.DocTest.Generic.GenericBase<System.Collections.Generic.Dictionary<A,B>>, Mono.DocTest.Generic.IFoo<A>, System.Collections.Generic.ICollection<A>, System.Collections.Generic.IEnumerable<A>, System.Collections.Generic.IEnumerator<A> where A : class, IList<B>, new() where B : class, A"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit MyList`2<class .ctor (class System.Collections.Generic.IList`1<!B>) A, class (!A) B> extends Mono.DocTest.Generic.GenericBase`1<class System.Collections.Generic.Dictionary`2<!A, !B>> implements class Mono.DocTest.Generic.IFoo`1<!A>, class System.Collections.Generic.ICollection`1<!A>, class System.Collections.Generic.IEnumerable`1<!A>, class System.Collections.Generic.IEnumerator`1<!A>, class System.Collections.IEnumerable, class System.Collections.IEnumerator, class System.IDisposable"
  />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="A">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>System.Collections.Generic.IList<B></InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="B">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <BaseTypeName>A</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName
      >Mono.DocTest.Generic.GenericBase<System.Collections.Generic.Dictionary<A,B>></BaseTypeName
    >
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="U"
        >System.Collections.Generic.Dictionary<A,B></BaseTypeArgument
      >
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.DocTest.Generic.IFoo<A></InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection<A></InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable<A></InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable<T></InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator<A></InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="A">Ako generic param</typeparam>
    <typeparam name="B">Bko generic param</typeparam>
    <summary>To be added.</summary>
    <remarks>
      <c>T:Mono.DocTest.MyList`2</c>

      .</remarks
    >
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MyList ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (A[] array, int arrayIndex);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void CopyTo(!A[] array, int32 arrayIndex) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="A[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Where to copy elements to</param>
        <param name="arrayIndex">Where to start copyingto</param>
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.CopyTo(`0[],System.Int32)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value
          >A <see
           cref="T:System.Int32" />

          .</value
        >
        <remarks>
          <c>P:Mono.DocTest.MyList`2.Count</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public A Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !A Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>The current value.</value>
        <remarks>
          <c>P:Mono.DocTest.MyList`2.Current</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void Dispose() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.Dispose</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Foo">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.KeyValuePair<System.Collections.Generic.IEnumerable<A>,System.Collections.Generic.IEnumerable<B>> Foo ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance valuetype System.Collections.Generic.KeyValuePair`2<class System.Collections.Generic.IEnumerable`1<!A>, class System.Collections.Generic.IEnumerable`1<!B>> Foo() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType
          >System.Collections.Generic.KeyValuePair<System.Collections.Generic.IEnumerable<A>,System.Collections.Generic.IEnumerable<B>></ReturnType
        >
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>M:Mono.DocTest.Generic.MyList`2.Foo</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.List<A>.Enumerator GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator<!A> GetEnumerator() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List<A>+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns
          >A <see
           cref="T:System.Collections.Generic.List{`0}.Enumerator" />

          .</returns
        >
        <remarks>
          <c>M:Mono.DocTest.MyList`2.GetEnumerator</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Mono.DocTest.Generic.IFoo<A>.Method<U>">
      <MemberSignature Language="C#" Value="A IFoo<A>.Method<U> (A a, U u);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance !A Mono.DocTest.Generic.IFoo<A>.Method<U>(!A a, !!U u) cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Mono.DocTest.Generic.IFoo`1.Method``1(`0,``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="a" Type="A" />
        <Parameter Name="u" Type="U" />
      </Parameters>
      <Docs>
        <typeparam name="U">U generic param on MyList`2</typeparam>
        <param name="a">To be added.</param>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <c>M:Mono.DocTest.Generic.MyList`2.Mono#DocTest#Generic#IFoo{A}#Method``1(`0,``0)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>
          <see cref="T:System.Boolean" />
        </returns>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.MoveNext</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void Reset() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.Reset</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Add">
      <MemberSignature Language="C#" Value="void ICollection<A>.Add (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection<A>.Add(!A item) cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">The item to add.</param>
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#Generic#ICollection{A}#Add(`0)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Clear">
      <MemberSignature Language="C#" Value="void ICollection<A>.Clear ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection<A>.Clear() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#Generic#ICollection{A}#Clear</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Contains">
      <MemberSignature Language="C#" Value="bool ICollection<A>.Contains (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection<A>.Contains(!A item) cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">The item to check for</param>
        <summary>To be added.</summary>
        <returns
          >A <see
           cref="T:System.Boolean" />

           instance (<see
           langword="false" />

          ).</returns
        >
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#Generic#ICollection{A}.Contains(`0)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.IsReadOnly">
      <MemberSignature
        Language="C#"
        Value="bool System.Collections.Generic.ICollection<A>.IsReadOnly { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance bool System.Collections.Generic.ICollection<A>.IsReadOnly"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value
          >A <see
           cref="T:System.Boolean" />

          .</value
        >
        <remarks>
          <c>P:Mono.DocTest.MyList`2.System#Collections#Generic#ICollection{A}#IsReadOnly</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<A>.Remove">
      <MemberSignature Language="C#" Value="bool ICollection<A>.Remove (A item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection<A>.Remove(!A item) cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="A" />
      </Parameters>
      <Docs>
        <param name="item">the item to remove</param>
        <summary>To be added.</summary>
        <returns>Whether the item was removed.</returns>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#Generic#ICollection{A}#Remove(`0)</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable<A>.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.Generic.IEnumerator<A> IEnumerable<A>.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1<!A> System.Collections.Generic.IEnumerable<A>.GetEnumerator() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator<A></ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns
          >A <see
           cref="T:System.Collections.Generic.IEnumerator{`0}" />

          .</returns
        >
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#Generic#IEnumerable{A}#GetEnumerator</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerator<A>.Current">
      <MemberSignature
        Language="C#"
        Value="A System.Collections.Generic.IEnumerator<A>.Current { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance !A System.Collections.Generic.IEnumerator<A>.Current"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>A</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>The current value.</value>
        <remarks>
          <c>P:Mono.DocTest.MyList`2.Current</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed"
      />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <c>M:Mono.DocTest.MyList`2.System#Collections#GetEnumerator</c>

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature
        Language="C#"
        Value="object System.Collections.IEnumerator.Current { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance object System.Collections.IEnumerator.Current"
      />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
