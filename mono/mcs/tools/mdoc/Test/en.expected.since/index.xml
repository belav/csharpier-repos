<Overview>
  <Assemblies>
    <Assembly Name="DocTest" Version="2.0.0.0">
      <Attributes>
        <Attribute>
          <AttributeName
            >System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName
          >
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName
            >System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName
          >
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="">
      <Type Name="NoNamespace" Kind="Class" />
    </Namespace>
    <Namespace Name="Mono.DocTest">
      <Type Name="AddedType" Kind="Class" />
      <Type Name="Color" Kind="Enumeration" />
      <Type Name="D" Kind="Delegate" />
      <Type Name="DocAttribute" Kind="Class" />
      <Type Name="DocValueType" Kind="Structure" />
      <Type Name="IProcess" Kind="Interface" />
      <Type Name="UseLists" Kind="Class" />
      <Type Name="Widget" Kind="Class" />
      <Type Name="Widget+Del" Kind="Delegate" />
      <Type Name="Widget+Direction" Kind="Enumeration" />
      <Type Name="Widget+IMenuItem" Kind="Interface" />
      <Type Name="Widget+NestedClass" Kind="Class" />
      <Type Name="Widget+NestedClass`1" DisplayName="Widget+NestedClass<T>" Kind="Class" />
      <Type Name="Widget+NestedClass+Double" Kind="Class" />
      <Type Name="Widget+NestedClass+Double+Triple" Kind="Class" />
      <Type Name="Widget+NestedClass+Double+Triple+Quadruple" Kind="Class" />
    </Namespace>
    <Namespace Name="Mono.DocTest.Generic">
      <Type Name="Extensions" Kind="Class" />
      <Type Name="Func`2" DisplayName="Func<TArg,TRet>" Kind="Delegate" />
      <Type Name="GenericBase`1" DisplayName="GenericBase<U>" Kind="Class" />
      <Type
        Name="GenericBase`1+FooEventArgs"
        DisplayName="GenericBase<U>+FooEventArgs"
        Kind="Class"
      />
      <Type
        Name="GenericBase`1+NestedCollection"
        DisplayName="GenericBase<U>+NestedCollection"
        Kind="Class"
      />
      <Type
        Name="GenericBase`1+NestedCollection+Enumerator"
        DisplayName="GenericBase<U>+NestedCollection+Enumerator"
        Kind="Structure"
      />
      <Type Name="IFoo`1" DisplayName="IFoo<T>" Kind="Interface" />
      <Type Name="MyList`1" DisplayName="MyList<T>" Kind="Class" />
      <Type Name="MyList`1+Helper`2" DisplayName="MyList<T>+Helper<U,V>" Kind="Class" />
      <Type Name="MyList`2" DisplayName="MyList<A,B>" Kind="Class" />
    </Namespace>
    <Namespace Name="System">
      <Type Name="Action`1" DisplayName="Action<T>" Kind="Delegate" />
      <Type Name="Array" Kind="Class" />
      <Type Name="AsyncCallback" Kind="Delegate" />
      <Type Name="Environment" Kind="Class" />
      <Type Name="Environment+SpecialFolder" Kind="Enumeration" />
    </Namespace>
  </Types>
  <Title>DocTest</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Mono.DocTest.Generic.IFoo`1" />
      </Targets>
      <Member MemberName="Bar<T>">
        <MemberSignature
          Language="C#"
          Value="public static void Bar<T> (this Mono.DocTest.Generic.IFoo<T> self, string s);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig void Bar<T>(class Mono.DocTest.Generic.IFoo`1<!!T> self, string s) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="Mono.DocTest.Generic.IFoo<T>" RefType="this" />
          <Parameter Name="s" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="s">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="Mono.DocTest.Generic.Extensions"
          Member="M:Mono.DocTest.Generic.Extensions.Bar``1(Mono.DocTest.Generic.IFoo{``0},System.String)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ForEach<T>">
        <MemberSignature
          Language="C#"
          Value="public static void ForEach<T> (this System.Collections.Generic.IEnumerable<T> self, Action<T> a);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig void ForEach<T>(class System.Collections.Generic.IEnumerable`1<!!T> self, class System.Action`1<!!T> a) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="System.Collections.Generic.IEnumerable<T>" RefType="this" />
          <Parameter Name="a" Type="System.Action<T>" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">To be added.</param>
          <param name="a">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="Mono.DocTest.Generic.Extensions"
          Member="M:Mono.DocTest.Generic.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDouble">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<double> ToDouble (this System.Collections.Generic.IEnumerable<int> list);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<float64> ToDouble(class System.Collections.Generic.IEnumerable`1<int32> list) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable<System.Double></ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="list"
            Type="System.Collections.Generic.IEnumerable<System.Int32>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="list">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="Mono.DocTest.Generic.Extensions"
          Member="M:Mono.DocTest.Generic.Extensions.ToDouble(System.Collections.Generic.IEnumerable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Mono.DocTest.Generic.IFoo`1" />
      </Targets>
      <Member MemberName="ToDouble<T>">
        <MemberSignature
          Language="C#"
          Value="public static double ToDouble<T> (this T val) where T : Mono.DocTest.Generic.IFoo<T>;"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 ToDouble<(class Mono.DocTest.Generic.IFoo`1<!!T>) T>(!!T val) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>Mono.DocTest.Generic.IFoo<T></InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="val" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="val">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="Mono.DocTest.Generic.Extensions"
          Member="M:Mono.DocTest.Generic.Extensions.ToDouble``1(``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Object" />
      </Targets>
      <Member MemberName="ToEnumerable<T>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<T> ToEnumerable<T> (this T self);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!T> ToEnumerable<T>(!!T self) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable<T></ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="self" Type="T" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="self">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="Mono.DocTest.Generic.Extensions"
          Member="M:Mono.DocTest.Generic.Extensions.ToEnumerable``1(``0)"
        />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
