<Type Name="IFoo<T>" FullName="Mono.DocTest.Generic.IFoo<T>">
  <TypeSignature Language="C#" Value="public interface IFoo<T>" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFoo`1<T>" />
  <AssemblyInfo>
    <AssemblyName>DocTest</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Method<U>">
      <MemberSignature Language="C#" Value="public T Method<U> (T t, U u);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance !T Method<U>(!T t, !!U u) cil managed"
      />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="T" />
        <Parameter Name="u" Type="U" />
      </Parameters>
      <Docs>
        <typeparam name="U">To be added.</typeparam>
        <param name="t">To be added.</param>
        <param name="u">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
