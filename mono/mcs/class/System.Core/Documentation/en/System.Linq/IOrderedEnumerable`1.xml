<?xml version="1.0" encoding="utf-8"?>
<Type Name="IOrderedEnumerable<TElement>" FullName="System.Linq.IOrderedEnumerable<TElement>">
  <TypeSignature
    Language="C#"
    Value="public interface IOrderedEnumerable<TElement> : System.Collections.Generic.IEnumerable<TElement>"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public interface auto ansi abstract IOrderedEnumerable`1<TElement> implements class System.Collections.Generic.IEnumerable`1<!TElement>, class System.Collections.IEnumerable"
  />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable<TElement></InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TElement">To be added.</typeparam>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >This type is enumerable because it inherits from <see
         cref="T:System.Collections.Generic.IEnumerable`1" />

        .</para
      >
      <para
        >The extension methods <see
         cref="Overload:System.Linq.Enumerable.ThenBy" />

         and <see
         cref="Overload:System.Linq.Enumerable.ThenByDescending" />

         operate on objects of type <see
         cref="T:System.Linq.IOrderedEnumerable`1" />

        . An object of type <see
         cref="T:System.Linq.IOrderedEnumerable`1" />

         can be obtained by calling one of the primary sort methods, <see
         cref="Overload:System.Linq.Enumerable.OrderBy" />

         or <see
         cref="Overload:System.Linq.Enumerable.OrderByDescending" />

        , which return an <see
         cref="T:System.Linq.IOrderedEnumerable`1" />

        . <see
         cref="Overload:System.Linq.Enumerable.ThenBy" />

         and <see
         cref="Overload:System.Linq.Enumerable.ThenByDescending" />

        , the subordinate sort methods, in turn also return an object of type <see
         cref="T:System.Linq.IOrderedEnumerable`1" />

        . This design allows for any number of consecutive calls to <see
         cref="Overload:System.Linq.Enumerable.ThenBy" />

         or <see
         cref="Overload:System.Linq.Enumerable.ThenByDescending" />

        , where each call performs a subordinate ordering on the sorted data returned from the previous call.</para
      >
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a sorted sequence.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="CreateOrderedEnumerable<TKey>">
      <MemberSignature
        Language="C#"
        Value="public System.Linq.IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey> (Func<TElement,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer, bool descending);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedEnumerable`1<!TElement> CreateOrderedEnumerable<TKey>(class System.Func`2<!TElement, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer, bool descending) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable<TElement></ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func<TElement,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <param name="keySelector">To be added.</param>
        <param name="comparer">To be added.</param>
        <param name="descending">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
