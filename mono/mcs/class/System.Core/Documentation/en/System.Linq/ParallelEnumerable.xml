<?xml version="1.0" encoding="utf-8"?>
<Type Name="ParallelEnumerable" FullName="System.Linq.ParallelEnumerable">
  <TypeSignature Language="C#" Value="public static class ParallelEnumerable" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi abstract sealed beforefieldinit ParallelEnumerable extends System.Object"
  />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>To be added.</remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <see
         cref="T:System.Linq.Enumerable" />

        .</para
      >
    </summary>
  </Docs>
  <Members>
    <Member MemberName="Aggregate<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Aggregate<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TSource,TSource> func);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Aggregate<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, !!TSource, !!TSource> func) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="func" Type="System.Func<TSource,TSource,TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies in parallel an accumulator function over a sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The final accumulator value.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to aggregate over.</param
        >
        <param name="func">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Aggregate<TSource,TAccumulate>">
      <MemberSignature
        Language="C#"
        Value="public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TAccumulate Aggregate<TSource, TAccumulate>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The final accumulator value.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to aggregate over.</param
        >
        <param name="seed">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The initial accumulator value.</param
        >
        <param name="func">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TAccumulate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the accumulator value.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func, Func<TAccumulate,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
        <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The transformed final accumulator value.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to aggregate over.</param
        >
        <param name="seed">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The initial accumulator value.</param
        >
        <param name="func">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on each element.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to transform the final accumulator value into the result value.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TAccumulate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the accumulator value.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the resulting value.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, Func<TAccumulate,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`1<!!TAccumulate> seedFactory, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> updateAccumulatorFunc, class System.Func`3<!!TAccumulate, !!TAccumulate, !!TAccumulate> combineAccumulatorsFunc, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="seedFactory" Type="System.Func<TAccumulate>" />
        <Parameter
          Name="updateAccumulatorFunc"
          Type="System.Func<TAccumulate,TSource,TAccumulate>"
        />
        <Parameter
          Name="combineAccumulatorsFunc"
          Type="System.Func<TAccumulate,TAccumulate,TAccumulate>"
        />
        <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload is specific to parallelized queries. A parallelized query may partition the data source sequence into several sub-sequences (partitions). The <paramref
             name="updateAccumulatorFunc" />

             is invoked on each element within partitions. Each partition then yields a single accumulated result. The <paramref
             name="combineAccumulatorsFunc" />

             is then invoked on the results of each partition to yield a single element. This element is then transformed by the <paramref
             name="resultSelector" />

             function.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The transformed final accumulator value.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to aggregate over.</param
        >
        <param name="seedFactory">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function that returns the initial accumulator value. </param
        >
        <param name="updateAccumulatorFunc">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on each element in a partition. </param
        >
        <param name="combineAccumulatorsFunc">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on the yielded accumulator result from each partition.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to transform the final accumulator value into the result value. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TAccumulate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the accumulator value.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the resulting value.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, Func<TAccumulate,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> updateAccumulatorFunc, class System.Func`3<!!TAccumulate, !!TAccumulate, !!TAccumulate> combineAccumulatorsFunc, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter
          Name="updateAccumulatorFunc"
          Type="System.Func<TAccumulate,TSource,TAccumulate>"
        />
        <Parameter
          Name="combineAccumulatorsFunc"
          Type="System.Func<TAccumulate,TAccumulate,TAccumulate>"
        />
        <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload is specific to processing a parallelized query. A parallelized query may partition the data source sequence into several sub-sequences (partitions). The <paramref
             name="updateAccumulatorFunc" />

             is invoked on each element within partitions. Each partition then yields a single accumulated result. The <paramref
             name="combineAccumulatorsFunc" />

             is then invoked on the results of each partition to yield a single element. This element is then transformed by the <paramref
             name="resultSelector" />

             function.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The transformed final accumulator value.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to aggregate over.</param
        >
        <param name="seed">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The initial accumulator value.</param
        >
        <param name="updateAccumulatorFunc">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on each element in a partition. </param
        >
        <param name="combineAccumulatorsFunc">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An accumulator function to be invoked on the yielded accumulator result from each partition. </param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to transform the final accumulator value into the result value. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TAccumulate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the accumulator value.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the resulting value.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="All<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool All<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool All<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines in parallel whether all elements of a sequence satisfy a condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false..</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements to apply the predicate to.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Any<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool Any<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool Any<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>This overload of the Any method causes a fully-buffered merge to be performed before the result is returned. The merge behavior can impact performance or cause an out of memory exception in large enumerables. To avoid the merge behavior, use the overload of Any that takes a Func parameter, or else use an alternative method such as FirstOrDefault.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether a parallel sequence contains any elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the source sequence contains any elements; otherwise, false.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to check for emptiness.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Any<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool Any<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool Any<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines in parallel whether any element of a sequence satisfies a condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to whose elements the predicate will be applied.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> AsEnumerable<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Converts a <see
             cref="T:System.Linq.ParallelQuery`1" />

             into an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

             to force sequential evaluation of the query.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The input sequence typed as <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to cast as <see
           cref="T:System.Collections.Generic.IEnumerable`1" />

          .</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsOrdered">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery AsOrdered (this System.Linq.ParallelQuery source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery AsOrdered(class System.Linq.ParallelQuery source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A natural tension exists between performance and preserving order in parallel processing. By default, a parallelized query behaves as if the ordering of the results is arbitrary unless AsOrdered is applied or there is an explicit OrderBy operator in the query. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on non-generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The source sequence which will maintain the original ordering in the subsequent query operators.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The input sequence.</param
        >
      </Docs>
    </Member>
    <Member MemberName="AsOrdered<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> AsOrdered<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsOrdered<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A natural tension exists between performance and preserving order in parallel processing. By default, a parallelized query behaves as if the ordering of the results is arbitrary unless AsOrdered is applied or there is an explicit OrderBy operator in the query. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The source sequence which will maintain the original ordering in the subsequent query operators.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The input sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsParallel">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery AsParallel (this System.Collections.IEnumerable source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery AsParallel(class System.Collections.IEnumerable source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <see
             cref="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)" />

             operator can be used to convert a ParallelQuery to a ParallelQuery(T).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables parallelization of a query.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEnumerable`1" />

           to convert to a <see
           cref="T:System.Linq.ParallelQuery" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="AsParallel<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> AsParallel<TSource> (this System.Collections.Concurrent.Partitioner<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsParallel<TSource>(class System.Collections.Concurrent.Partitioner`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Collections.Concurrent.Partitioner<TSource>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The source partitioner's GetOrderedPartitions method is used when ordering is enabled, whereas the partitioner's GetPartitions is used if ordering is not enabled (the default). The source partitioner's GetDynamicPartitions and GetDynamicOrderedPartitions are not used. For more information and examples, see <format
             type="text/html">
              <a href="96153688-9a01-47c4-8430-909cee9a2887"
                >Custom Partitioners for PLINQ and TPL</a
              >
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables parallelization of a query, as sourced by a custom partitioner that is responsible for splitting the input sequence into partitions.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="source" />

             as a ParallelQuery to bind to ParallelEnumerable extension methods.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A partitioner over the input sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsParallel<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> AsParallel<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsParallel<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Collections.Generic.IEnumerable<TSource>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Enables parallelization of a query.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The source as a <see
             cref="T:System.Linq.ParallelQuery`1" />

             to bind to ParallelEnumerable extension methods.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEnumerable`1" />

           to convert to a <see
           cref="T:System.Linq.ParallelQuery`1" />

          .</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsSequential<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> AsSequential<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

             and <format
             type="text/html">
              <a href="c67eccc7-004d-4b2f-987e-919cbbd62ef7"
                >How to: Control Ordering in a PLINQ Query</a
              >
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Converts a <see
             cref="T:System.Linq.ParallelQuery`1" />

             into an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

             to force sequential evaluation of the query.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The source as an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

             to bind to sequential extension methods.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A <see
           cref="T:System.Linq.ParallelQuery`1" />

           to convert to an <see
           cref="T:System.Collections.Generic.IEnumerable`1" />

          .</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="AsUnordered<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> AsUnordered<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsUnordered<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >AsUnordered may provide performance benefits when ordering is not required in a portion of a query. By default, PLINQ treats an input sequence as unordered unless OrderBy or AsOrdered is specified. However, if ordering was turned on and is no longer needed, then AsUnordered can be used to turn it off in mid-query, and this may result in performance benefits. The AsUnordered operator itself does not shuffle the source sequence; it simply removes the ordering requirement for subsequent operators. If the source is ordered, subsequent operators might keep that ordering if it is more efficient to do so. AsUnordered can be called anywhere in the query; it does not need to be called immediately after AsParallel. For more information, see <format
             type="text/html">
              <a href="53706c7e-397d-467a-98cd-c0d1fd63ba5e">Understanding Speedup in PLINQ</a>
            </format>

             and <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Allows an intermediate query to be treated as if no ordering is implied among the elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The source sequence with arbitrary order.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The input sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static decimal Average (this System.Linq.ParallelQuery<decimal> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Decimal>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static double Average (this System.Linq.ParallelQuery<double> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<float64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static double Average (this System.Linq.ParallelQuery<int> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<int32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static double Average (this System.Linq.ParallelQuery<long> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<int64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Average (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<double>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The source sequence.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<int>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<long>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Average (this System.Linq.ParallelQuery<Nullable<float>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature
        Language="C#"
        Value="public static float Average (this System.Linq.ParallelQuery<float> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Average(class System.Linq.ParallelQuery`1<float32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static decimal Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Average<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static float Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The average of the sequence of values.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values that are used to calculate an average.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Cast<TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Cast<TResult> (this System.Linq.ParallelQuery source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Cast<TResult>(class System.Linq.ParallelQuery source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Converts the elements of a ParallelQuery to the specified type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains each element of the source sequence converted to the specified type.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence that contains the elements to be converted.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type to convert the elements of <paramref
           name="source" />

           to.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Concat<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Concat<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Concat<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Concat with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Concat operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Concat overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Concat<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Concat<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Concat<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Concatenates two parallel sequences.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the concatenated elements of the two input sequences.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to concatenate.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to concatenate to the first sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Contains<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool Contains<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource value);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource value) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the source sequence contains an element that has the specified value; otherwise, false.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence in which to locate a value.</param
        >
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The value to locate in the sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Contains<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool Contains<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Determines in parallel whether a sequence contains a specified element by using a specified <see
             cref="T:System.Collections.Generic.IEqualityComparer`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the source sequence contains an element that has the specified value; otherwise, false.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence in which to locate a value.</param
        >
        <param name="value">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The value to locate in the sequence.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An equality comparer to compare values.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Count<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static int Count<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the number of elements in a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of elements in the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence that contains elements to be counted.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Count<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static int Count<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence that contains elements to be counted.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that contains default(TSource) if <paramref
             name="source" />

             is empty; otherwise, <paramref
             name="source" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return a default value for if it is empty.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource defaultValue);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource defaultValue) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that contains defaultValue if <paramref
             name="source" />

             is empty; otherwise, <paramref
             name="source" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the specified value for if it is empty.</param
        >
        <param name="defaultValue">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The value to return if the sequence is empty.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Distinct<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Distinct<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Distinct<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains distinct elements from the source sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to remove duplicate elements from.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Distinct<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Distinct<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Distinct<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Returns distinct elements from a parallel sequence by using a specified <see
             cref="T:System.Collections.Generic.IEqualityComparer`1" />

             to compare values.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains distinct elements from the source sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to remove duplicate elements from.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

            to compare values.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ElementAt<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource ElementAt<TSource> (this System.Linq.ParallelQuery<TSource> source, int index);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource ElementAt<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 index) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the element at a specified index in a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The element at the specified position in the source sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to return an element from.</param
        >
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The zero-based index of the element to retrieve.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource ElementAtOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, int index);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource ElementAtOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 index) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to return an element from.</param
        >
        <param name="index">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The zero-based index of the element to retrieve.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Empty<TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Empty<TResult> ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Empty<TResult>() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an empty ParallelQuery{TResult} that has the specified type argument.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >An empty sequence whose type argument is <paramref
             name="TResult" />

            .</para
          >
        </returns>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type to assign to the type parameter of the returned generic sequence.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Except<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Except with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Except operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Except overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Except<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the set difference of the elements of two sequences.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements that are not also in <paramref
           name="second" />

           will be returned.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Except<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Except with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Except operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Except overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Except<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Produces the set difference of two parallel sequences by using the specified <see
             cref="T:System.Collections.Generic.IEqualityComparer`1" />

             to compare values.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the set difference of the elements of two sequences.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements that are not also in <paramref
           name="second" />

           will be returned.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. </param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />
          <see cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare values.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="First<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource First<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the first element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the first element of a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The first element in the specified sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the first element of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="First<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource First<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the first element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the first element in a parallel sequence that satisfies a specified condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The first element in the sequence that passes the test in the specified predicate function.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return an element from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource FirstOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the first element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >default(TSource) if <paramref
             name="source" />

             is empty; otherwise, the first element in <paramref
             name="source" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the first element of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource FirstOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the first element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >default(TSource) if <paramref
             name="source" />

             is empty or if no element passes the test specified by predicate; otherwise, the first element in <paramref
             name="source" />

             that passes the test specified by predicate.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return an element from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ForAll<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static void ForAll<TSource> (this System.Linq.ParallelQuery<TSource> source, Action<TSource> action);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig void ForAll<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Action`1<!!TSource> action) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="action" Type="System.Action<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This is an efficient way to process the output from a parallelized query because it does not require a merge step at the end. For more information, see <format
             type="text/html">
              <a href="e8f7be3b-88de-4f33-ab14-dc008e76c1ba">Merge Options in PLINQ</a>
            </format>

             or <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            . Because this method produces a side-effect, it can be used to observe the actual order of execution in a parallel query.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Invokes in parallel the specified action for each element in the <paramref
             name="source" />

            .</para
          >
        </summary>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Linq.ParallelQuery`1" />

           whose elements will be processed by <paramref
           name="action" />

          .</param
        >
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An Action to invoke on each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a specified key selector function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of groups that are sorted descending according to <paramref
             name="TKey" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource}that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified <see
             cref="T:System.Collections.Generic.IComparer`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of groups that are sorted descending according to <paramref
             name="TKey" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Linq.OrderedParallelQuery`1" />

           that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          &gt;.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of groups that are sorted descending according to <paramref
             name="TKey" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Linq.OrderedParallelQuery`1" />

           that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to map each source element to an element in an <see
           cref="T:System.Linq.IGrouping`2" />

          .</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements in the <see
           cref="T:System.Linq.IGrouping`2" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of groups that are sorted descending according to <paramref
             name="TKey" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource}that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to map each source element to an element in an IGrouping.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An IComparer{TSource} to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements in the IGrouping</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of elements of type <paramref
             name="TResult" />

             where each element represents a projection over a group and its key.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements to group.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the key for each element.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result value from each group.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result value returned by <paramref
           name="resultSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
        />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence of groups.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements to group.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the key for each element.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result value from each group.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result value returned by <paramref
           name="resultSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of elements of type <paramref
             name="TResult" />

             where each element represents a projection over a group and its key.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements to group.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the key for each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to map each source element to an element in an IGrouping&lt;TKey, TElement&gt;.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result value from each group.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements in each IGrouping{TKey, TElement}.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result value returned by <paramref
           name="resultSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
        />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence of elements of type <paramref
             name="TResult" />

             where each element represents a projection over a group and its key.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose elements to group.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the key for each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to map each source element to an element in an IGrouping{Key, TElement}.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result value from each group.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements in each IGrouping{TKey, TElement}.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result value returned by <paramref
           name="resultSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of GroupJoin with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the GroupJoin operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This GroupJoin overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Correlates in parallel the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that has elements of type <paramref
             name="TResult" />

             that are obtained by performing a grouped join on two sequences.</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to join.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to join to the first sequence.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the first sequence.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the second sequence.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the second sequence.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the first sequence.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the keys returned by the key selector functions.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result elements.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
        />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of GroupJoin with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the GroupJoin operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This GroupJoin overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter
          Name="resultSelector"
          Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
        />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Correlates in parallel the elements of two sequences based on key equality and groups the results. A specified <see
             cref="T:System.Collections.Generic.IEqualityComparer`1" />

             is used to compare keys.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that has elements of type <paramref
             name="TResult" />

             that are obtained by performing a grouped join on two sequences.</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to join.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to join to the first sequence.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the first sequence.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the second sequence.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to hash and compare keys.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the second sequence.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the first sequence.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the keys returned by the key selector functions.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result elements.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Intersect<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Intersect with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Intersect operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Intersect overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Intersect<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements that form the set intersection of two sequences.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements that also appear in <paramref
           name="second" />

           will be returned.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements that also appear in the first sequence will be returned.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Intersect<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Intersect with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Intersect operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Intersect overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Intersect<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements that form the set intersection of two sequences.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements that also appear in <paramref
           name="second" />

           will be returned.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements that also appear in the first sequence will be returned.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare values.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage Join with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Join operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Join overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when invoked.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Correlates in parallel the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that has elements of type <paramref
             name="TResult" />

             that are obtained by performing an inner join on two sequences.</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to join.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to join to the first sequence.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the first sequence.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the second sequence.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from two matching elements.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the second sequence.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the first sequence.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the keys returned by the key selector functions.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result elements.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Join with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Join operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Join overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when invoked.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
        <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
        <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
        <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
        <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Correlates in parallel the elements of two sequences based on matching keys. A specified <see
             cref="T:System.Collections.Generic.IEqualityComparer`1" />

             is used to compare keys.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that has elements of type <paramref
             name="TResult" />

             that are obtained by performing an inner join on two sequences.</para
          >
        </returns>
        <param name="outer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to join.</param
        >
        <param name="inner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to join to the first sequence.</param
        >
        <param name="outerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the first sequence.</param
        >
        <param name="innerKeySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract the join key from each element of the second sequence.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from two matching elements.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to hash and compare keys.</param
        >
        <typeparam name="TOuter">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the second sequence.</typeparam
        >
        <typeparam name="TInner">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the first sequence.</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the keys returned by the key selector functions.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result elements.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Last<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Last<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the last element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the last element of a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The value at the last position in the source sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the last element from.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Last<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Last<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the last element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the last element of a parallel sequence that satisfies a specified condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The last element in the sequence that passes the test in the specified predicate function.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return an element from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource LastOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the last element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>default() if the source sequence is empty; otherwise, the last element in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return an element from.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource LastOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >If the query is not ordered, then the last element is non-deterministic. For more information, see <format
             type="text/html">
              <a href="10d202bc-19e1-4b5c-bbf1-9a977322a9ca">Order Preservation in PLINQ</a>
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return an element from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="LongCount<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static long LongCount<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an Int64 that represents the total number of elements in a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The number of elements in the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence that contains elements to be counted.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="LongCount<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static long LongCount<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence that contains elements to be counted.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static decimal Max (this System.Linq.ParallelQuery<decimal> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Max(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Decimal>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static double Max (this System.Linq.ParallelQuery<double> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Max(class System.Linq.ParallelQuery`1<float64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static int Max (this System.Linq.ParallelQuery<int> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Max(class System.Linq.ParallelQuery`1<int32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static long Max (this System.Linq.ParallelQuery<long> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Max(class System.Linq.ParallelQuery`1<int64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Max (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Max (this System.Linq.ParallelQuery<Nullable<double>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Max (this System.Linq.ParallelQuery<Nullable<int>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Max (this System.Linq.ParallelQuery<Nullable<long>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Max (this System.Linq.ParallelQuery<Nullable<float>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature
        Language="C#"
        Value="public static float Max (this System.Linq.ParallelQuery<float> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Max(class System.Linq.ParallelQuery`1<float32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Max<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the maximum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements in the source sequence.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static decimal Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static int Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static long Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static float Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Max<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static TResult Max<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TResult Max<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The maximum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the maximum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="selector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static decimal Min (this System.Linq.ParallelQuery<decimal> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Min(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Decimal>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static double Min (this System.Linq.ParallelQuery<double> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Min(class System.Linq.ParallelQuery`1<float64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static int Min (this System.Linq.ParallelQuery<int> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Min(class System.Linq.ParallelQuery`1<int32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static long Min (this System.Linq.ParallelQuery<long> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Min(class System.Linq.ParallelQuery`1<int64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Min (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Min (this System.Linq.ParallelQuery<Nullable<double>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Min (this System.Linq.ParallelQuery<Nullable<int>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Min (this System.Linq.ParallelQuery<Nullable<long>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Min (this System.Linq.ParallelQuery<Nullable<float>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature
        Language="C#"
        Value="public static float Min (this System.Linq.ParallelQuery<float> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Min(class System.Linq.ParallelQuery`1<float32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Min<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the minimum value in a parallel sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static decimal Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static int Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static long Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static float Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Min<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static TResult Min<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TResult Min<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The minimum value in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to determine the minimum value of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="selector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="OfType<TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> OfType<TResult> (this System.Linq.ParallelQuery source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> OfType<TResult>(class System.Linq.ParallelQuery source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Filters the elements of a ParallelQuery based on a specified type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains elements from the input sequence of type .</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence whose elements to filter.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type to filter the elements of the sequence on.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="OrderBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>In contrast to the sequential implementation, this is not a stable sort. To achieve a stable sort, change a query of the form: var ordered = source.Select((e,i) =&gt; new { E=e, I=i }).OrderBy((v) =&gt; v.e).ThenBy(v =&gt; v.i).Select((v) =&gt; v.e); </para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sorts in parallel the elements of a sequence in ascending order according to a key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to order.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="OrderBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to order.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An IComparer{TKey} to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sorts in parallel the elements of a sequence in descending order according to a key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to order.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sorts the elements of a sequence in descending order by using a specified comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to order.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An IComparer{TKey} to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<int> Range (int start, int count);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<int32> Range(int32 start, int32 count) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Generates a parallel sequence of integral numbers within a specified range.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</para>
        </returns>
        <param name="start">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The value of the first integer in the sequence.</param
        >
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The number of sequential integers to generate.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Repeat<TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Repeat<TResult> (TResult element, int count);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Repeat<TResult>(!!TResult element, int32 count) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">To be added.</typeparam>
        <param name="element">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Reverse<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Reverse<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Inverts the order of the elements in a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence whose elements correspond to those of the input sequence in reverse order.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to reverse.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Select<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,TResult> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Select<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, !!TResult> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int32,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence whose elements are the result of invoking the transform function on each element of <paramref
             name="source" />

            , based on the index supplied to <paramref
             name="selector" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to invoke a transform function on.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements resturned by selector.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Select<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Select<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Projects in parallel each element of a sequence into a new form.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence whose elements are the result of invoking the transform function on each element of <paramref
             name="source" />

            .</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to invoke a transform function on.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements resturned by selector.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SelectMany<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter
          Name="selector"
          Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Projects in parallel each element of a sequence to an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

             and flattens the resulting sequences into one sequence.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to project.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the sequence returned by selector.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SelectMany<TSource,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter
          Name="selector"
          Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Projects in parallel each element of a sequence to an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            , and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to project.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the sequence returned by selector.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SelectMany<TSource,TCollection,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter
          Name="collectionSelector"
          Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>"
        />
        <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Projects each element of a sequence to an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence whose elements are the result of invoking the one-to-many transform function <paramref
             name="collectionSelector" />

             on each element of <paramref
             name="source" />

             based on the index supplied to <paramref
             name="collectionSelector" />

            , and then mapping each of those sequence elements and their corresponding source element to a result element. </para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to project.</param
        >
        <param name="collectionSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the intermediate elements collected by <paramref
           name="collectionSelector" />

          .</typeparam
        >
        <typeparam name="TCollection">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements in the result sequence.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SelectMany<TSource,TCollection,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter
          Name="collectionSelector"
          Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>"
        />
        <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Projects each element of a sequence to an <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            , flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence whose elements are the result of invoking the one-to-many transform function <paramref
             name="collectionSelector" />

             on each element of <paramref
             name="source" />

             based on the index supplied to <paramref
             name="collectionSelector" />

            , and then mapping each of those sequence elements and their corresponding source element to a result element.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to project.</param
        >
        <param name="collectionSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the intermediate elements collected by <paramref
           name="collectionSelector" />

          .</typeparam
        >
        <typeparam name="TCollection">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements to return.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of SequenceEqual with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the SequenceEqual operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to compare to second.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to compare to the first input sequence.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of SequenceEqual with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the SequenceEqual operator would appear to be binding to the parallel implementation, but would in reality bind to sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to compare to <paramref
           name="second" />

          .</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to compare to the first input sequence.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to use to compare elements.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Single<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Single<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The single element of the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the single element of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Single<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource Single<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The single element of the input sequence that satisfies a condition.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the single element of.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test an element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource SingleOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The single element of the input sequence, or default() if the sequence contains no elements.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the single element of.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource SingleOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return the single element of.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test an element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Skip<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Skip<TSource> (this System.Linq.ParallelQuery<TSource> source, int count);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Skip<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 count) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>If count &gt; source.Count(), no elements are returned.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements that occur after the specified index in the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The number of elements to skip before returning the remaining elements.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SkipWhile<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> SkipWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="SkipWhile<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> SkipWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static decimal Sum (this System.Linq.ParallelQuery<decimal> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Decimal>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static double Sum (this System.Linq.ParallelQuery<double> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Sum(class System.Linq.ParallelQuery`1<float64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static int Sum (this System.Linq.ParallelQuery<int> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Sum(class System.Linq.ParallelQuery`1<int32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static long Sum (this System.Linq.ParallelQuery<long> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Sum(class System.Linq.ParallelQuery`1<int64> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Sum (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Sum (this System.Linq.ParallelQuery<Nullable<double>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Sum (this System.Linq.ParallelQuery<Nullable<int>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Sum (this System.Linq.ParallelQuery<Nullable<long>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Sum (this System.Linq.ParallelQuery<Nullable<float>> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="source"
          Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
          RefType="this"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature
        Language="C#"
        Value="public static float Sum (this System.Linq.ParallelQuery<float> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Sum(class System.Linq.ParallelQuery`1<float32> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of a sequence of values.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static decimal Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Decimal Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static double Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float64 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static int Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int32 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements in the source sequence.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static long Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig int64 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<decimal> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<double> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<int> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<long> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static Nullable<float> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Sum<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static float Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig float32 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The sum of the projected values in the sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence of values to calculate the sum of.</param
        >
        <param name="selector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to apply to each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Take<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Take<TSource> (this System.Linq.ParallelQuery<TSource> source, int count);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Take<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 count) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a specified number of contiguous elements from the start of a parallel sequence.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the specified number of elements from the start of the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="count">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The number of elements to return.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="TakeWhile<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> TakeWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns elements from a parallel sequence as long as a specified condition is true.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="TakeWhile<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> TakeWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns elements from a parallel sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to return elements from.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ThenBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.OrderedParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource} that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ThenBy<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.OrderedParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource} that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An IComparer{TKey} to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.OrderedParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence whose elements are sorted descending according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource} that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.OrderedParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >In contrast to the sequential implementation, this is not a stable sort. See the remarks for <see
             cref="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})" />

             for an approach to implementing a stable sort.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence whose elements are sorted descending according to a key.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An OrderedParallelQuery{TSource} that contains elements to sort.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from an element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An IComparer{TKey} to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToArray<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static TSource[] ToArray<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!TSource[] ToArray<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates an array from a <see
             cref="T:System.Linq.ParallelQuery`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>An array that contains the elements from the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create an array from.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToDictionary<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             that contains keys and values.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create a <see
           cref="T:System.Collections.Generic.Dictionary`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToDictionary<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Collections.Generic.Dictionary`2" />

              from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function and key comparer.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             that contains keys and values.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create a <see
           cref="T:System.Collections.Generic.Dictionary`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToDictionary<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to specified key selector and element selector functions.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             that contains values of type <paramref
             name="TElement" />

             selected from the input sequence</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create a <see
           cref="T:System.Collections.Generic.Dictionary`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to produce a result element value from each element. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="elementSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToDictionary<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function, a comparer, and an element selector function.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Collections.Generic.Dictionary`2" />

             that contains values of type <paramref
             name="TElement" />

             selected from the input sequence</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create a <see
           cref="T:System.Collections.Generic.Dictionary`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to produce a result element value from each element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="elementSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToList<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Collections.Generic.List<TSource> ToList<TSource> (this System.Linq.ParallelQuery<TSource> source);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Collections.Generic.List`1<!!TSource> ToList<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Collections.Generic.List`1" />

             from an <see
             cref="T:System.Linq.ParallelQuery`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Collections.Generic.List`1" />

              that contains elements from the input sequence.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to create a <see
           cref="T:System.Collections.Generic.List`1" />

           from.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToLookup<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates an <see
             cref="T:System.Linq.ILookup`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Linq.ILookup`2" />

             that contains keys and values.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to create a <see
           cref="T:System.Linq.ILookup`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToLookup<TSource,TKey>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates an <see
             cref="T:System.Linq.ILookup`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function and key comparer.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Linq.ILookup`2" />

             that contains keys and values.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to create a <see
           cref="T:System.Linq.ILookup`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToLookup<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates an <see
             cref="T:System.Linq.ILookup`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to specified key selector and element selector functions.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Linq.ILookup`2" />

             that contains values of type <paramref
             name="TElement" />

             selected from the input sequence.</para
          >
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to create a <see
           cref="T:System.Linq.ILookup`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to produce a result element value from each element. </param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="elementSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ToLookup<TSource,TKey,TElement>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates an <see
             cref="T:System.Linq.ILookup`2" />

             from a <see
             cref="T:System.Linq.ParallelQuery`1" />

             according to a specified key selector function, a comparer and an element selector function.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The sequence to create a <see
           cref="T:System.Linq.ILookup`2" />

           from.</param
        >
        <param name="keySelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to extract a key from each element.</param
        >
        <param name="elementSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A transform function to produce a result element value from each element. </param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare keys.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
        <typeparam name="TKey">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the key returned by <paramref
           name="keySelector" />

          .</typeparam
        >
        <typeparam name="TElement">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the value returned by <paramref
           name="elementSelector" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Union<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Union with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Union operator would appear to be binding to the parallel implementation, but would in reality bind to sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Union overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Union<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the set union of two parallel sequences by using the default equality comparer.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements from both input sequences, excluding duplicates.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements form the first set for the union.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements form the second set for the union.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Union<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Union with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Union operator would appear to be binding to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Union overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when called.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Union<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains the elements from both input sequences, excluding duplicates.</para>
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements form the first set for the union.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence whose distinct elements form the second set for the union.</param
        >
        <param name="comparer">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An <see
           cref="T:System.Collections.Generic.IEqualityComparer`1" />

           to compare values.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the input sequences.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Where<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Where<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Where<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Filters in parallel a sequence of values based on a predicate.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains elements from the input sequence that satisfy the condition.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to filter.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of source.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Where<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> Where<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Where<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>A sequence that contains elements from the input sequence that satisfy the condition.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A sequence to filter.</param
        >
        <param name="predicate">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to test each element for a condition.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of source.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="WithCancellation<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> WithCancellation<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithCancellation<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Sets the <see
             cref="T:System.Threading.CancellationToken" />

             to associate with the query.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ParallelQuery representing the same query as source, but with the registered cancellation token.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A ParallelQuery on which to set the option.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A cancellation token.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="WithDegreeOfParallelism<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource> (this System.Linq.ParallelQuery<TSource> source, int degreeOfParallelism);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithDegreeOfParallelism<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 degreeOfParallelism) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="degreeOfParallelism" Type="System.Int32" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A ParallelQuery on which to set the limit on the degrees of parallelism.</param
        >
        <param name="degreeOfParallelism">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The degree of parallelism for the query. The default value is Math.Min(<see
           cref="P:System.Environment.ProcessorCount" />

          , MAX_SUPPORTED_DOP) where MAX_SUPPORTED_DOP is 64.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="WithExecutionMode<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelExecutionMode executionMode);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithExecutionMode<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Linq.ParallelExecutionMode executionMode) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="executionMode" Type="System.Linq.ParallelExecutionMode" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The execution mode specifies whether PLINQ will attempt to fall back to sequential execution if it detects certain query shapes. For more information and examples, see <format
             type="text/html">
              <a href="e52ff26c-c5d3-4fab-9fec-c937fb387963"
                >How to: Specify the Execution Mode in PLINQ</a
              >
            </format>

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the execution mode of the query.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ParallelQuery representing the same query as source, but with the registered execution mode.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A ParallelQuery on which to set the option.</param
        >
        <param name="executionMode">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The mode in which to execute the query.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="WithMergeOptions<TSource>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelMergeOptions mergeOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithMergeOptions<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Linq.ParallelMergeOptions mergeOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        <Parameter Name="mergeOptions" Type="System.Linq.ParallelMergeOptions" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Sets the merge options for this query, which specify how the query will buffer output.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>ParallelQuery representing the same query as source, but with the registered merge options.</para>
        </returns>
        <param name="source">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A ParallelQuery on which to set the option.</param
        >
        <param name="mergeOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The merge options to set for this query.</param
        >
        <typeparam name="TSource">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of elements of <paramref
           name="source" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Zip<TFirst,TSecond,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.ParallelQuery<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Linq.ParallelQuery`1<!!TFirst> first, class System.Collections.Generic.IEnumerable`1<!!TSecond> second, class System.Func`3<!!TFirst, !!TSecond, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery&lt;T&gt; rather than System.Collections.Generic.IEnumerable&lt;T&gt;. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery&lt;T&gt;.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TFirst>" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSecond>" />
        <Parameter Name="resultSelector" Type="System.Func<TFirst,TSecond,TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload exists to disallow usage of Zip with a left data source of type <see
             cref="T:System.Linq.ParallelQuery`1" />

             and a right data source of type <see
             cref="T:System.Collections.Generic.IEnumerable`1" />

            . Otherwise, the Zip operator would appear to be bind to the parallel implementation, but would in reality bind to the sequential implementation.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This Zip overload should never be called. This method is marked as obsolete and always throws <see
             cref="T:System.NotSupportedException" />

             when invoked.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This overload always throws a <see
             cref="T:System.NotSupportedException" />

            .</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This parameter is not used.</param
        >
        <typeparam name="TFirst">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TSecond">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          This type parameter is not used.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Zip<TFirst,TSecond,TResult>">
      <MemberSignature
        Language="C#"
        Value="public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.ParallelQuery<TFirst> first, System.Linq.ParallelQuery<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Linq.ParallelQuery`1<!!TFirst> first, class System.Linq.ParallelQuery`1<!!TSecond> second, class System.Func`3<!!TFirst, !!TSecond, !!TResult> resultSelector) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Linq.ParallelQuery<TFirst>" RefType="this" />
        <Parameter Name="second" Type="System.Linq.ParallelQuery<TSecond>" />
        <Parameter Name="resultSelector" Type="System.Func<TFirst,TSecond,TResult>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Merges in parallel two sequences by using the specified predicate function.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A sequence that has elements of type <paramref
             name="TResult" />

             that are obtained by performing <paramref
             name="resultSelector" />

             pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</para
          >
        </returns>
        <param name="first">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first sequence to zip.</param
        >
        <param name="second">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second sequence to zip.</param
        >
        <param name="resultSelector">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function to create a result element from two matching elements.</param
        >
        <typeparam name="TFirst">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the first sequence.</typeparam
        >
        <typeparam name="TSecond">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the elements of the second sequence.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the return elements.</typeparam
        >
      </Docs>
    </Member>
  </Members>
</Type>
