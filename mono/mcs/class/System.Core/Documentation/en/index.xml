<Overview>
  <Assemblies>
    <Assembly Name="System.Core" Version="4.0.0.0">
      <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Mono development team")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) Various Mono authors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.0.30319.17020")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.0.30319.17020")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Mono Common Language Infrastructure")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("4.0.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.DefaultDependency(System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.StringFreezing</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.Win32.SafeHandles">
      <Type Name="SafeMemoryMappedFileHandle" Kind="Class" />
      <Type Name="SafeMemoryMappedViewHandle" Kind="Class" />
      <Type Name="SafePipeHandle" Kind="Class" />
    </Namespace>
    <Namespace Name="Mono.Security.Cryptography"></Namespace>
    <Namespace Name="System">
      <Type Name="Action" Kind="Delegate" />
      <Type Name="Action`10" DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>" Kind="Delegate" />
      <Type
        Name="Action`11"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11>"
        Kind="Delegate"
      />
      <Type
        Name="Action`12"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12>"
        Kind="Delegate"
      />
      <Type
        Name="Action`13"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13>"
        Kind="Delegate"
      />
      <Type
        Name="Action`14"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14>"
        Kind="Delegate"
      />
      <Type
        Name="Action`15"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15>"
        Kind="Delegate"
      />
      <Type
        Name="Action`16"
        DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>"
        Kind="Delegate"
      />
      <Type Name="Action`2" DisplayName="Action<T1,T2>" Kind="Delegate" />
      <Type Name="Action`3" DisplayName="Action<T1,T2,T3>" Kind="Delegate" />
      <Type Name="Action`4" DisplayName="Action<T1,T2,T3,T4>" Kind="Delegate" />
      <Type Name="Action`9" DisplayName="Action<T1,T2,T3,T4,T5,T6,T7,T8,T9>" Kind="Delegate" />
      <Type Name="Func`1" DisplayName="Func<TResult>" Kind="Delegate" />
      <Type Name="Func`10" DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,TResult>" Kind="Delegate" />
      <Type
        Name="Func`11"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`12"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`13"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`14"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`15"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`16"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,TResult>"
        Kind="Delegate"
      />
      <Type
        Name="Func`17"
        DisplayName="Func<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult>"
        Kind="Delegate"
      />
      <Type Name="Func`2" DisplayName="Func<T,TResult>" Kind="Delegate" />
      <Type Name="Func`3" DisplayName="Func<T1,T2,TResult>" Kind="Delegate" />
      <Type Name="Func`4" DisplayName="Func<T1,T2,T3,TResult>" Kind="Delegate" />
      <Type Name="Func`5" DisplayName="Func<T1,T2,T3,T4,TResult>" Kind="Delegate" />
      <Type Name="InvalidTimeZoneException" Kind="Class" />
      <Type Name="TimeZoneInfo" Kind="Class" />
      <Type Name="TimeZoneInfo+AdjustmentRule" Kind="Class" />
      <Type Name="TimeZoneInfo+TransitionTime" Kind="Structure" />
      <Type Name="TimeZoneNotFoundException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Collections.Generic">
      <Type Name="HashSet`1" DisplayName="HashSet<T>" Kind="Class" />
      <Type Name="HashSet`1+Enumerator" DisplayName="HashSet<T>+Enumerator" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Dynamic">
      <Type Name="BinaryOperationBinder" Kind="Class" />
      <Type Name="BindingRestrictions" Kind="Class" />
      <Type Name="CallInfo" Kind="Class" />
      <Type Name="ConvertBinder" Kind="Class" />
      <Type Name="CreateInstanceBinder" Kind="Class" />
      <Type Name="DeleteIndexBinder" Kind="Class" />
      <Type Name="DeleteMemberBinder" Kind="Class" />
      <Type Name="DynamicMetaObject" Kind="Class" />
      <Type Name="DynamicMetaObjectBinder" Kind="Class" />
      <Type Name="DynamicObject" Kind="Class" />
      <Type Name="ExpandoObject" Kind="Class" />
      <Type Name="GetIndexBinder" Kind="Class" />
      <Type Name="GetMemberBinder" Kind="Class" />
      <Type Name="IDynamicMetaObjectProvider" Kind="Interface" />
      <Type Name="IInvokeOnGetBinder" Kind="Interface" />
      <Type Name="InvokeBinder" Kind="Class" />
      <Type Name="InvokeMemberBinder" Kind="Class" />
      <Type Name="SetIndexBinder" Kind="Class" />
      <Type Name="SetMemberBinder" Kind="Class" />
      <Type Name="UnaryOperationBinder" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO">
      <Type Name="HandleInheritability" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.IO.MemoryMappedFiles">
      <Type Name="MemoryMappedFile" Kind="Class" />
      <Type Name="MemoryMappedFileAccess" Kind="Enumeration" />
      <Type Name="MemoryMappedFileOptions" Kind="Enumeration" />
      <Type Name="MemoryMappedFileRights" Kind="Enumeration" />
      <Type Name="MemoryMappedFileSecurity" Kind="Class" />
      <Type Name="MemoryMappedViewAccessor" Kind="Class" />
      <Type Name="MemoryMappedViewStream" Kind="Class" />
    </Namespace>
    <Namespace Name="System.IO.Pipes">
      <Type Name="AnonymousPipeClientStream" Kind="Class" />
      <Type Name="AnonymousPipeServerStream" Kind="Class" />
      <Type Name="NamedPipeClientStream" Kind="Class" />
      <Type Name="NamedPipeServerStream" Kind="Class" />
      <Type Name="PipeAccessRights" Kind="Enumeration" />
      <Type Name="PipeAccessRule" Kind="Class" />
      <Type Name="PipeAuditRule" Kind="Class" />
      <Type Name="PipeDirection" Kind="Enumeration" />
      <Type Name="PipeOptions" Kind="Enumeration" />
      <Type Name="PipeSecurity" Kind="Class" />
      <Type Name="PipeStream" Kind="Class" />
      <Type Name="PipeStreamImpersonationWorker" Kind="Delegate" />
      <Type Name="PipeTransmissionMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Linq">
      <Type Name="Enumerable" Kind="Class" />
      <Type Name="EnumerableExecutor" Kind="Class" />
      <Type Name="EnumerableExecutor`1" DisplayName="EnumerableExecutor<T>" Kind="Class" />
      <Type Name="EnumerableQuery" Kind="Class" />
      <Type Name="EnumerableQuery`1" DisplayName="EnumerableQuery<T>" Kind="Class" />
      <Type Name="IGrouping`2" DisplayName="IGrouping<TKey,TElement>" Kind="Interface" />
      <Type Name="ILookup`2" DisplayName="ILookup<TKey,TElement>" Kind="Interface" />
      <Type
        Name="IOrderedEnumerable`1"
        DisplayName="IOrderedEnumerable<TElement>"
        Kind="Interface"
      />
      <Type Name="IOrderedQueryable" Kind="Interface" />
      <Type Name="IOrderedQueryable`1" DisplayName="IOrderedQueryable<T>" Kind="Interface" />
      <Type Name="IQueryable" Kind="Interface" />
      <Type Name="IQueryable`1" DisplayName="IQueryable<T>" Kind="Interface" />
      <Type Name="IQueryProvider" Kind="Interface" />
      <Type Name="Lookup`2" DisplayName="Lookup<TKey,TElement>" Kind="Class" />
      <Type
        Name="OrderedParallelQuery`1"
        DisplayName="OrderedParallelQuery<TSource>"
        Kind="Class"
      />
      <Type Name="ParallelEnumerable" Kind="Class" />
      <Type Name="ParallelExecutionMode" Kind="Enumeration" />
      <Type Name="ParallelMergeOptions" Kind="Enumeration" />
      <Type Name="ParallelQuery" Kind="Class" />
      <Type Name="ParallelQuery`1" DisplayName="ParallelQuery<TSource>" Kind="Class" />
      <Type Name="Queryable" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Linq.Expressions">
      <Type Name="BinaryExpression" Kind="Class" />
      <Type Name="BlockExpression" Kind="Class" />
      <Type Name="CatchBlock" Kind="Class" />
      <Type Name="ConditionalExpression" Kind="Class" />
      <Type Name="ConstantExpression" Kind="Class" />
      <Type Name="DebugInfoExpression" Kind="Class" />
      <Type Name="DefaultExpression" Kind="Class" />
      <Type Name="DynamicExpression" Kind="Class" />
      <Type Name="DynamicExpressionVisitor" Kind="Class" />
      <Type Name="ElementInit" Kind="Class" />
      <Type Name="Expression" Kind="Class" />
      <Type Name="Expression`1" DisplayName="Expression<TDelegate>" Kind="Class" />
      <Type Name="ExpressionType" Kind="Enumeration" />
      <Type Name="ExpressionVisitor" Kind="Class" />
      <Type Name="GotoExpression" Kind="Class" />
      <Type Name="GotoExpressionKind" Kind="Enumeration" />
      <Type Name="IndexExpression" Kind="Class" />
      <Type Name="InvocationExpression" Kind="Class" />
      <Type Name="LabelExpression" Kind="Class" />
      <Type Name="LabelTarget" Kind="Class" />
      <Type Name="LambdaExpression" Kind="Class" />
      <Type Name="ListInitExpression" Kind="Class" />
      <Type Name="LoopExpression" Kind="Class" />
      <Type Name="MemberAssignment" Kind="Class" />
      <Type Name="MemberBinding" Kind="Class" />
      <Type Name="MemberBindingType" Kind="Enumeration" />
      <Type Name="MemberExpression" Kind="Class" />
      <Type Name="MemberInitExpression" Kind="Class" />
      <Type Name="MemberListBinding" Kind="Class" />
      <Type Name="MemberMemberBinding" Kind="Class" />
      <Type Name="MethodCallExpression" Kind="Class" />
      <Type Name="NewArrayExpression" Kind="Class" />
      <Type Name="NewExpression" Kind="Class" />
      <Type Name="ParameterExpression" Kind="Class" />
      <Type Name="RuntimeVariablesExpression" Kind="Class" />
      <Type Name="SwitchCase" Kind="Class" />
      <Type Name="SwitchExpression" Kind="Class" />
      <Type Name="SymbolDocumentInfo" Kind="Class" />
      <Type Name="TryExpression" Kind="Class" />
      <Type Name="TypeBinaryExpression" Kind="Class" />
      <Type Name="UnaryExpression" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.CompilerServices">
      <Type Name="CallSite" Kind="Class" />
      <Type Name="CallSite`1" DisplayName="CallSite<T>" Kind="Class" />
      <Type Name="CallSiteBinder" Kind="Class" />
      <Type Name="CallSiteHelpers" Kind="Class" />
      <Type Name="CallSiteOps" Kind="Class" />
      <Type Name="Closure" Kind="Class" />
      <Type Name="DebugInfoGenerator" Kind="Class" />
      <Type Name="DynamicAttribute" Kind="Class" />
      <Type Name="ExecutionScope" Kind="Class" />
      <Type Name="ExtensionAttribute" Kind="Class" />
      <Type Name="IRuntimeVariables" Kind="Interface" />
      <Type Name="IStrongBox" Kind="Interface" />
      <Type
        Name="ReadOnlyCollectionBuilder`1"
        DisplayName="ReadOnlyCollectionBuilder<T>"
        Kind="Class"
      />
      <Type Name="RuleCache`1" DisplayName="RuleCache<T>" Kind="Class" />
      <Type Name="RuntimeOps" Kind="Class" />
      <Type Name="StrongBox`1" DisplayName="StrongBox<T>" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Cryptography">
      <Type Name="AesCryptoServiceProvider" Kind="Class" />
      <Type Name="AesManaged" Kind="Class" />
      <Type Name="CngAlgorithm" Kind="Class" />
      <Type Name="CngAlgorithmGroup" Kind="Class" />
      <Type Name="MD5Cng" Kind="Class" />
      <Type Name="SHA1Cng" Kind="Class" />
      <Type Name="SHA256Cng" Kind="Class" />
      <Type Name="SHA256CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA384Cng" Kind="Class" />
      <Type Name="SHA384CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA512Cng" Kind="Class" />
      <Type Name="SHA512CryptoServiceProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Threading">
      <Type Name="LockRecursionPolicy" Kind="Enumeration" />
      <Type Name="ReaderWriterLockSlim" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Threading.Tasks">
      <Type Name="TaskExtensions" Kind="Class" />
    </Namespace>
  </Types>
  <Title>System.Core</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Aggregate<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TSource,TSource> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Aggregate<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, !!TSource, !!TSource> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="func" Type="System.Func<TSource,TSource,TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate>">
        <MemberSignature
          Language="C#"
          Value="public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TAccumulate Aggregate<TSource, TAccumulate>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func, Func<TAccumulate,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
          <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="All<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool All<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool All<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsEnumerable<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> AsEnumerable<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average (this System.Collections.Generic.IEnumerable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Collections.Generic.IEnumerable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Double>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Collections.Generic.IEnumerable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int32>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Collections.Generic.IEnumerable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int64>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Collections.Generic.IEnumerable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average (this System.Collections.Generic.IEnumerable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static float Average (this System.Collections.Generic.IEnumerable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Single>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Average<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="Cast<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Cast<TResult> (this System.Collections.IEnumerable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Cast<TResult>(class System.Collections.IEnumerable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Concat<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Concat<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Concat<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource value);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, !!TSource value) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> DefaultIfEmpty<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, TSource defaultValue);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> DefaultIfEmpty<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, !!TSource defaultValue) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Distinct<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Distinct<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAt<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAt<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAt<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAtOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAtOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Except<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Except<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Except<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Except<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="outer"
            Type="System.Collections.Generic.IEnumerable<TOuter>"
            RefType="this"
          />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="outer"
            Type="System.Collections.Generic.IEnumerable<TOuter>"
            RefType="this"
          />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Intersect<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Intersect<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="outer"
            Type="System.Collections.Generic.IEnumerable<TOuter>"
            RefType="this"
          />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Collections.Generic.IEnumerable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="outer"
            Type="System.Collections.Generic.IEnumerable<TOuter>"
            RefType="this"
          />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static decimal Max (this System.Collections.Generic.IEnumerable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static double Max (this System.Collections.Generic.IEnumerable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Double>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static int Max (this System.Collections.Generic.IEnumerable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int32>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static long Max (this System.Collections.Generic.IEnumerable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int64>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Max (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Max (this System.Collections.Generic.IEnumerable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Max (this System.Collections.Generic.IEnumerable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Max (this System.Collections.Generic.IEnumerable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Max (this System.Collections.Generic.IEnumerable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static float Max (this System.Collections.Generic.IEnumerable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Single>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Max<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Max<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Max<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Max<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static decimal Min (this System.Collections.Generic.IEnumerable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static double Min (this System.Collections.Generic.IEnumerable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Double>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static int Min (this System.Collections.Generic.IEnumerable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int32>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static long Min (this System.Collections.Generic.IEnumerable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int64>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Min (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Min (this System.Collections.Generic.IEnumerable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Min (this System.Collections.Generic.IEnumerable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Min (this System.Collections.Generic.IEnumerable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Min (this System.Collections.Generic.IEnumerable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static float Min (this System.Collections.Generic.IEnumerable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Single>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Min<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Min<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Min<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Min<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="OfType<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> OfType<TResult> (this System.Collections.IEnumerable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> OfType<TResult>(class System.Collections.IEnumerable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> OrderBy<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> OrderBy<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Reverse<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Reverse<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Reverse<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Select<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Select<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> SelectMany<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter
            Name="selector"
            Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> SelectMany<TSource, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter
            Name="selector"
            Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter
            Name="collectionSelector"
            Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter
            Name="collectionSelector"
            Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Skip<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Skip<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Skip<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> SkipWhile<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> SkipWhile<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum (this System.Collections.Generic.IEnumerable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static double Sum (this System.Collections.Generic.IEnumerable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Double>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static int Sum (this System.Collections.Generic.IEnumerable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int32>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static long Sum (this System.Collections.Generic.IEnumerable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Int64>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum (this System.Collections.Generic.IEnumerable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum (this System.Collections.Generic.IEnumerable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum (this System.Collections.Generic.IEnumerable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum (this System.Collections.Generic.IEnumerable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum (this System.Collections.Generic.IEnumerable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum(class System.Collections.Generic.IEnumerable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static float Sum (this System.Collections.Generic.IEnumerable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<System.Single>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Sum<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Take<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Take<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Take<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> TakeWhile<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> TakeWhile<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.IOrderedEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.IOrderedEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.IOrderedEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.IOrderedEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToArray<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource[] ToArray<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource[] ToArray<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToList<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.List<TSource> ToList<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.List`1<!!TSource> ToList<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Union<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Union<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Union<TSource> (this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Union<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Where<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Where<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> Where<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> Where<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Zip<TFirst,TSecond,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TResult> Zip<TFirst,TSecond,TResult> (this System.Collections.Generic.IEnumerable<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Collections.Generic.IEnumerable`1<!!TFirst> first, class System.Collections.Generic.IEnumerable`1<!!TSecond> second, class System.Func`3<!!TFirst, !!TSecond, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="first"
            Type="System.Collections.Generic.IEnumerable<TFirst>"
            RefType="this"
          />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSecond>" />
          <Parameter Name="resultSelector" Type="System.Func<TFirst,TSecond,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Enumerable"
          Member="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Aggregate<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TSource,TSource> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Aggregate<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, !!TSource, !!TSource> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="func" Type="System.Func<TSource,TSource,TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate>">
        <MemberSignature
          Language="C#"
          Value="public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TAccumulate Aggregate<TSource, TAccumulate>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, Func<TAccumulate,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> updateAccumulatorFunc, class System.Func`3<!!TAccumulate, !!TAccumulate, !!TAccumulate> combineAccumulatorsFunc, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter
            Name="updateAccumulatorFunc"
            Type="System.Func<TAccumulate,TSource,TAccumulate>"
          />
          <Parameter
            Name="combineAccumulatorsFunc"
            Type="System.Func<TAccumulate,TAccumulate,TAccumulate>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="updateAccumulatorFunc">To be added.</param>
          <param name="combineAccumulatorsFunc">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate,TSource,TAccumulate> func, Func<TAccumulate,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TAccumulate seed, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> func, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func<TAccumulate,TSource,TAccumulate>" />
          <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, Func<TAccumulate,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`1<!!TAccumulate> seedFactory, class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate> updateAccumulatorFunc, class System.Func`3<!!TAccumulate, !!TAccumulate, !!TAccumulate> combineAccumulatorsFunc, class System.Func`2<!!TAccumulate, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="seedFactory" Type="System.Func<TAccumulate>" />
          <Parameter
            Name="updateAccumulatorFunc"
            Type="System.Func<TAccumulate,TSource,TAccumulate>"
          />
          <Parameter
            Name="combineAccumulatorsFunc"
            Type="System.Func<TAccumulate,TAccumulate,TAccumulate>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TAccumulate,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seedFactory">To be added.</param>
          <param name="updateAccumulatorFunc">To be added.</param>
          <param name="combineAccumulatorsFunc">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="All<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool All<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool All<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsEnumerable<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> AsEnumerable<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="AsOrdered">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery AsOrdered (this System.Linq.ParallelQuery source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery AsOrdered(class System.Linq.ParallelQuery source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsOrdered<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> AsOrdered<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsOrdered<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="AsParallel">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery AsParallel (this System.Collections.IEnumerable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery AsParallel(class System.Collections.IEnumerable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Concurrent.Partitioner`1" />
      </Targets>
      <Member MemberName="AsParallel<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> AsParallel<TSource> (this System.Collections.Concurrent.Partitioner<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsParallel<TSource>(class System.Collections.Concurrent.Partitioner`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Concurrent.Partitioner<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsParallel<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> AsParallel<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsParallel<TSource>(class System.Collections.Generic.IEnumerable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TSource>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsSequential<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1<!!TSource> AsSequential<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="AsUnordered<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> AsUnordered<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> AsUnordered<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average (this System.Linq.ParallelQuery<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.ParallelQuery<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.ParallelQuery<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.ParallelQuery<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.ParallelQuery`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.ParallelQuery<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average (this System.Linq.ParallelQuery<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static float Average (this System.Linq.ParallelQuery<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average(class System.Linq.ParallelQuery`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Average<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="Cast<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Cast<TResult> (this System.Linq.ParallelQuery source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Cast<TResult>(class System.Linq.ParallelQuery source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Concat<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Concat<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Concat<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Concat<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Concat<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Concat<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource value);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource value) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource> (this System.Linq.ParallelQuery<TSource> source, TSource defaultValue);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, !!TSource defaultValue) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Distinct<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Distinct<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Distinct<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Distinct<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ElementAt<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAt<TSource> (this System.Linq.ParallelQuery<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAt<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAtOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAtOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Except<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Except<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ForAll<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static void ForAll<TSource> (this System.Linq.ParallelQuery<TSource> source, Action<TSource> action);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig void ForAll<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Action`1<!!TSource> action) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="action" Type="System.Action<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="action">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter
            Name="resultSelector"
            Type="System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Intersect<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Intersect<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, Func<TOuter,TKey> outerKeySelector, Func<TInner,TKey> innerKeySelector, Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.ParallelQuery`1<!!TOuter> outer, class System.Linq.ParallelQuery`1<!!TInner> inner, class System.Func`2<!!TOuter, !!TKey> outerKeySelector, class System.Func`2<!!TInner, !!TKey> innerKeySelector, class System.Func`3<!!TOuter, !!TInner, !!TResult> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.ParallelQuery<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Linq.ParallelQuery<TInner>" />
          <Parameter Name="outerKeySelector" Type="System.Func<TOuter,TKey>" />
          <Parameter Name="innerKeySelector" Type="System.Func<TInner,TKey>" />
          <Parameter Name="resultSelector" Type="System.Func<TOuter,TInner,TResult>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static decimal Max (this System.Linq.ParallelQuery<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Max(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static double Max (this System.Linq.ParallelQuery<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Max(class System.Linq.ParallelQuery`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static int Max (this System.Linq.ParallelQuery<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Max(class System.Linq.ParallelQuery`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static long Max (this System.Linq.ParallelQuery<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Max(class System.Linq.ParallelQuery`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Max (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Max (this System.Linq.ParallelQuery<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Max (this System.Linq.ParallelQuery<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Max (this System.Linq.ParallelQuery<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Max (this System.Linq.ParallelQuery<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature
          Language="C#"
          Value="public static float Max (this System.Linq.ParallelQuery<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Max(class System.Linq.ParallelQuery`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Max<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Max<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Max<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Max<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Max<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Max<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static decimal Min (this System.Linq.ParallelQuery<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Min(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static double Min (this System.Linq.ParallelQuery<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Min(class System.Linq.ParallelQuery`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static int Min (this System.Linq.ParallelQuery<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Min(class System.Linq.ParallelQuery`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static long Min (this System.Linq.ParallelQuery<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Min(class System.Linq.ParallelQuery`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Min (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Min (this System.Linq.ParallelQuery<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Min (this System.Linq.ParallelQuery<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Min (this System.Linq.ParallelQuery<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Min (this System.Linq.ParallelQuery<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature
          Language="C#"
          Value="public static float Min (this System.Linq.ParallelQuery<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Min(class System.Linq.ParallelQuery`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Min<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Min<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Min<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Min<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Min<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Min<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery" />
      </Targets>
      <Member MemberName="OfType<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> OfType<TResult> (this System.Linq.ParallelQuery source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> OfType<TResult>(class System.Linq.ParallelQuery source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Reverse<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Reverse<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Reverse<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Select<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,TResult> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Select<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, !!TResult> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter
            Name="collectionSelector"
            Type="System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, Func<TSource,TCollection,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TCollection>> collectionSelector, class System.Func`3<!!TSource, !!TCollection, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter
            Name="collectionSelector"
            Type="System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>"
          />
          <Parameter Name="resultSelector" Type="System.Func<TSource,TCollection,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Skip<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Skip<TSource> (this System.Linq.ParallelQuery<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Skip<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> SkipWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> SkipWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum (this System.Linq.ParallelQuery<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.ParallelQuery`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Decimal>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static double Sum (this System.Linq.ParallelQuery<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum(class System.Linq.ParallelQuery`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static int Sum (this System.Linq.ParallelQuery<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum(class System.Linq.ParallelQuery`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static long Sum (this System.Linq.ParallelQuery<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum(class System.Linq.ParallelQuery`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum (this System.Linq.ParallelQuery<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum (this System.Linq.ParallelQuery<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum (this System.Linq.ParallelQuery<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum (this System.Linq.ParallelQuery<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum (this System.Linq.ParallelQuery<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum(class System.Linq.ParallelQuery`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.ParallelQuery<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static float Sum (this System.Linq.ParallelQuery<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum(class System.Linq.ParallelQuery`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,decimal> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Decimal> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Decimal>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,double> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Double>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int32>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,long> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, int64> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Int64>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Decimal>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Double>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int32>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Int64>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,Nullable<float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Nullable<System.Single>>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Sum<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,float> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, float32> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="selector" Type="System.Func<TSource,System.Single>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Take<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Take<TSource> (this System.Linq.ParallelQuery<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Take<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> TakeWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> TakeWhile<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.OrderedParallelQuery<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.OrderedParallelQuery<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.OrderedParallelQuery<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.OrderedParallelQuery`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey> (this System.Linq.OrderedParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.OrderedParallelQuery`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.OrderedParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.OrderedParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.OrderedParallelQuery<TSource>"
            RefType="this"
          />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToArray<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource[] ToArray<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource[] ToArray<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource[]</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TSource> ToDictionary<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToDictionary<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2<!!TKey, !!TElement> ToDictionary<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToList<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Collections.Generic.List<TSource> ToList<TSource> (this System.Linq.ParallelQuery<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Collections.Generic.List`1<!!TSource> ToList<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TSource> ToLookup<TSource, TKey>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="ToLookup<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,TKey> keySelector, Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ILookup`2<!!TKey, !!TElement> ToLookup<TSource, TKey, TElement>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, !!TKey> keySelector, class System.Func`2<!!TSource, !!TElement> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func<TSource,TKey>" />
          <Parameter Name="elementSelector" Type="System.Func<TSource,TElement>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Collections.Generic.IEnumerable`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Union<TSource> (this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Union<TSource>(class System.Linq.ParallelQuery`1<!!TSource> first, class System.Linq.ParallelQuery`1<!!TSource> second, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Where<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Where<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`2<!!TSource, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> Where<TSource> (this System.Linq.ParallelQuery<TSource> source, Func<TSource,int,bool> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> Where<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, class System.Func`3<!!TSource, int32, bool> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="predicate" Type="System.Func<TSource,System.Int32,System.Boolean>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithCancellation<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> WithCancellation<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Threading.CancellationToken cancellationToken);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithCancellation<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithDegreeOfParallelism<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource> (this System.Linq.ParallelQuery<TSource> source, int degreeOfParallelism);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithDegreeOfParallelism<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, int32 degreeOfParallelism) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="degreeOfParallelism" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="degreeOfParallelism">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithExecutionMode<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelExecutionMode executionMode);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithExecutionMode<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Linq.ParallelExecutionMode executionMode) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="executionMode" Type="System.Linq.ParallelExecutionMode" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="executionMode">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="WithMergeOptions<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource> (this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelMergeOptions mergeOptions);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TSource> WithMergeOptions<TSource>(class System.Linq.ParallelQuery`1<!!TSource> source, valuetype System.Linq.ParallelMergeOptions mergeOptions) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.ParallelQuery<TSource>" RefType="this" />
          <Parameter Name="mergeOptions" Type="System.Linq.ParallelMergeOptions" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="mergeOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Zip<TFirst,TSecond,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.ParallelQuery<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Linq.ParallelQuery`1<!!TFirst> first, class System.Collections.Generic.IEnumerable`1<!!TSecond> second, class System.Func`3<!!TFirst, !!TSecond, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TFirst>" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable<TSecond>" />
          <Parameter Name="resultSelector" Type="System.Func<TFirst,TSecond,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.ParallelQuery`1" />
      </Targets>
      <Member MemberName="Zip<TFirst,TSecond,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.ParallelQuery<TFirst> first, System.Linq.ParallelQuery<TSecond> second, Func<TFirst,TSecond,TResult> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.ParallelQuery`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Linq.ParallelQuery`1<!!TFirst> first, class System.Linq.ParallelQuery`1<!!TSecond> second, class System.Func`3<!!TFirst, !!TSecond, !!TResult> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ParallelQuery&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="first" Type="System.Linq.ParallelQuery<TFirst>" RefType="this" />
          <Parameter Name="second" Type="System.Linq.ParallelQuery<TSecond>" />
          <Parameter Name="resultSelector" Type="System.Func<TFirst,TSecond,TResult>" />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.ParallelEnumerable"
          Member="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Aggregate<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TSource,TSource>> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Aggregate<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, !!TSource, !!TSource>> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="func"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate>">
        <MemberSignature
          Language="C#"
          Value="public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TAccumulate Aggregate<TSource, TAccumulate>(class System.Linq.IQueryable`1<!!TSource> source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate>> func) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter
            Name="func"
            Type="System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate<TSource,TAccumulate,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func, System.Linq.Expressions.Expression<Func<TAccumulate,TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Aggregate<TSource, TAccumulate, TResult>(class System.Linq.IQueryable`1<!!TSource> source, !!TAccumulate seed, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TAccumulate, !!TSource, !!TAccumulate>> func, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TAccumulate, !!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter
            Name="func"
            Type="System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>"
          />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="All<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool All<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool All<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Any<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="AsQueryable">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable AsQueryable(class System.Collections.IEnumerable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsQueryable<TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TElement> AsQueryable<TElement> (this System.Collections.Generic.IEnumerable<TElement> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TElement> AsQueryable<TElement>(class System.Collections.Generic.IEnumerable`1<!!TElement> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Collections.Generic.IEnumerable<TElement>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average (this System.Linq.IQueryable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average(class System.Linq.IQueryable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Decimal>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.IQueryable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.IQueryable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static double Average (this System.Linq.IQueryable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average(class System.Linq.IQueryable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average (this System.Linq.IQueryable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average(class System.Linq.IQueryable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.IQueryable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.IQueryable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average(class System.Linq.IQueryable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average (this System.Linq.IQueryable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average(class System.Linq.IQueryable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature
          Language="C#"
          Value="public static float Average (this System.Linq.IQueryable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average(class System.Linq.IQueryable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Decimal>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Double>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int32>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int64>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Single>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Average<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Cast<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Cast<TResult> (this System.Linq.IQueryable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Cast<TResult>(class System.Linq.IQueryable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Concat<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Concat<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Concat<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.IQueryable`1<!!TSource> source, !!TSource item) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="item" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool Contains<TSource>(class System.Linq.IQueryable`1<!!TSource> source, !!TSource item, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="item" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Count<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Count<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source, TSource defaultValue);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> DefaultIfEmpty<TSource>(class System.Linq.IQueryable`1<!!TSource> source, !!TSource defaultValue) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Distinct<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Distinct<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAt<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAt<TSource> (this System.Linq.IQueryable<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAt<TSource>(class System.Linq.IQueryable`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource ElementAtOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, int index);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource ElementAtOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source, int32 index) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Except<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Except<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource First<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource FirstOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<class System.Linq.IGrouping`2<!!TKey, !!TSource>> GroupBy<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TElement>> elementSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="elementSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TElement>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<class System.Linq.IGrouping`2<!!TKey, !!TElement>> GroupBy<TSource, TKey, TElement>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TElement>> elementSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="elementSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TElement>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupBy<TSource, TKey, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TSource>, !!TResult>> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TElement>> elementSelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="elementSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TElement>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy<TSource,TKey,TElement,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupBy<TSource, TKey, TElement, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TElement>> elementSelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TKey, class System.Collections.Generic.IEnumerable`1<!!TElement>, !!TResult>> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter
            Name="elementSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TElement>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.IQueryable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TOuter, !!TKey>> outerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TInner, !!TKey>> innerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter
            Name="outerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>"
          />
          <Parameter
            Name="innerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TInner,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> GroupJoin<TOuter, TInner, TKey, TResult>(class System.Linq.IQueryable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TOuter, !!TKey>> outerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TInner, !!TKey>> innerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TOuter, class System.Collections.Generic.IEnumerable`1<!!TInner>, !!TResult>> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter
            Name="outerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>"
          />
          <Parameter
            Name="innerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TInner,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Intersect<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Intersect<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.IQueryable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TOuter, !!TKey>> outerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TInner, !!TKey>> innerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TOuter, !!TInner, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter
            Name="outerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>"
          />
          <Parameter
            Name="innerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TInner,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join<TOuter,TInner,TKey,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Join<TOuter, TInner, TKey, TResult>(class System.Linq.IQueryable`1<!!TOuter> outer, class System.Collections.Generic.IEnumerable`1<!!TInner> inner, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TOuter, !!TKey>> outerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TInner, !!TKey>> innerKeySelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TOuter, !!TInner, !!TResult>> resultSelector, class System.Collections.Generic.IEqualityComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable<TOuter>" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable<TInner>" />
          <Parameter
            Name="outerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>"
          />
          <Parameter
            Name="innerKeySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TInner,TKey>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Last<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource LastOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 LongCount<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Max<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Max<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Max<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Max<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Min<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Min<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static TResult Min<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TResult Min<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="OfType<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> OfType<TResult> (this System.Linq.IQueryable source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> OfType<TResult>(class System.Linq.IQueryable source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> OrderBy<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> OrderByDescending<TSource, TKey>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Reverse<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Reverse<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Reverse<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Select<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,TResult>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Select<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, !!TResult>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TResult>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TResult>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> SelectMany<TSource, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TResult>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, class System.Collections.Generic.IEnumerable`1<!!TCollection>>> collectionSelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, !!TCollection, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="collectionSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany<TSource,TCollection,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> SelectMany<TSource, TCollection, TResult>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, class System.Collections.Generic.IEnumerable`1<!!TCollection>>> collectionSelector, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, !!TCollection, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="collectionSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>"
          />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig bool SequenceEqual<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource Single<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig !!TSource SingleOrDefault<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Skip<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Skip<TSource> (this System.Linq.IQueryable<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Skip<TSource>(class System.Linq.IQueryable`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> SkipWhile<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> SkipWhile<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum (this System.Linq.IQueryable<decimal> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Linq.IQueryable`1<valuetype System.Decimal> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Decimal>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static double Sum (this System.Linq.IQueryable<double> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum(class System.Linq.IQueryable`1<float64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Double>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static int Sum (this System.Linq.IQueryable<int> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum(class System.Linq.IQueryable`1<int32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Int32>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static long Sum (this System.Linq.IQueryable<long> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum(class System.Linq.IQueryable`1<int64> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Int64>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum (this System.Linq.IQueryable<Nullable<decimal>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum(class System.Linq.IQueryable`1<valuetype System.Nullable`1<valuetype System.Decimal>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Decimal>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum (this System.Linq.IQueryable<Nullable<double>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum(class System.Linq.IQueryable`1<valuetype System.Nullable`1<float64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Double>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum (this System.Linq.IQueryable<Nullable<int>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum(class System.Linq.IQueryable`1<valuetype System.Nullable`1<int32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Int32>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum (this System.Linq.IQueryable<Nullable<long>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum(class System.Linq.IQueryable`1<valuetype System.Nullable`1<int64>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Int64>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum (this System.Linq.IQueryable<Nullable<float>> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum(class System.Linq.IQueryable`1<valuetype System.Nullable`1<float32>> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="source"
            Type="System.Linq.IQueryable<System.Nullable<System.Single>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature
          Language="C#"
          Value="public static float Sum (this System.Linq.IQueryable<float> source);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum(class System.Linq.IQueryable`1<float32> source) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<System.Single>" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static decimal Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Decimal Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Decimal>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static double Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float64 Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, float64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static int Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int32 Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, int32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static long Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig int64 Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, int64>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<decimal> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<valuetype System.Decimal> Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<valuetype System.Decimal>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Decimal>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<double> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float64> Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<float64>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Double>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<int> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int32> Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<int32>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int32>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<long> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<int64> Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<int64>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int64>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static Nullable<float> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig valuetype System.Nullable`1<float32> Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, valuetype System.Nullable`1<float32>>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Single>>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static float Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig float32 Sum<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, float32>> selector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="selector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Take<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Take<TSource> (this System.Linq.IQueryable<TSource> source, int count);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Take<TSource>(class System.Linq.IQueryable`1<!!TSource> source, int32 count) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> TakeWhile<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> TakeWhile<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.IOrderedQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> ThenBy<TSource, TKey>(class System.Linq.IOrderedQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.IOrderedQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending<TSource,TKey>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IOrderedQueryable`1<!!TSource> ThenByDescending<TSource, TKey>(class System.Linq.IOrderedQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, !!TKey>> keySelector, class System.Collections.Generic.IComparer`1<!!TKey> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable<TSource>" RefType="this" />
          <Parameter
            Name="keySelector"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,TKey>>"
          />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer<TKey>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Union<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Union<TSource>(class System.Linq.IQueryable`1<!!TSource> source1, class System.Collections.Generic.IEnumerable`1<!!TSource> source2, class System.Collections.Generic.IEqualityComparer`1<!!TSource> comparer) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSource>" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<TSource>" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Where<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`2<!!TSource, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where<TSource>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TSource> Where<TSource>(class System.Linq.IQueryable`1<!!TSource> source, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TSource, int32, bool>> predicate) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable<TSource>" RefType="this" />
          <Parameter
            Name="predicate"
            Type="System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Boolean>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Zip<TFirst,TSecond,TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Linq.IQueryable<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<Func<TFirst,TSecond,TResult>> resultSelector);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Linq.IQueryable`1<!!TResult> Zip<TFirst, TSecond, TResult>(class System.Linq.IQueryable`1<!!TFirst> source1, class System.Collections.Generic.IEnumerable`1<!!TSecond> source2, class System.Linq.Expressions.Expression`1<class System.Func`3<!!TFirst, !!TSecond, !!TResult>> resultSelector) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TFirst" />
          <TypeParameter Name="TSecond" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable<TFirst>" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable<TSecond>" />
          <Parameter
            Name="resultSelector"
            Type="System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>>"
          />
        </Parameters>
        <Docs>
          <typeparam name="TFirst">To be added.</typeparam>
          <typeparam name="TSecond">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Linq.Queryable"
          Member="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="Unwrap">
        <MemberSignature
          Language="C#"
          Value="public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task<System.Threading.Tasks.Task> task);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Threading.Tasks.Task Unwrap(class System.Threading.Tasks.Task`1<class System.Threading.Tasks.Task> task) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter
            Name="task"
            Type="System.Threading.Tasks.Task<System.Threading.Tasks.Task>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <param name="task">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Threading.Tasks.TaskExtensions"
          Member="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})"
        />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Threading.Tasks.Task`1" />
      </Targets>
      <Member MemberName="Unwrap<TResult>">
        <MemberSignature
          Language="C#"
          Value="public static System.Threading.Tasks.Task<TResult> Unwrap<TResult> (this System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> task);"
        />
        <MemberSignature
          Language="ILAsm"
          Value=".method public static hidebysig class System.Threading.Tasks.Task`1<!!TResult> Unwrap<TResult>(class System.Threading.Tasks.Task`1<class System.Threading.Tasks.Task`1<!!TResult>> task) cil managed"
        />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter
            Name="task"
            Type="System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>"
            RefType="this"
          />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="task">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link
          Type="System.Threading.Tasks.TaskExtensions"
          Member="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})"
        />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
