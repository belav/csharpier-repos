<?xml version="1.0" encoding="utf-8"?>
<Type Name="ExtensionCollection<T>" FullName="System.ServiceModel.ExtensionCollection<T>">
  <TypeSignature
    Language="C#"
    Value="public sealed class ExtensionCollection<T> : System.Collections.Generic.SynchronizedCollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>>, System.ServiceModel.IExtensionCollection<T> where T : IExtensibleObject<T>"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi sealed beforefieldinit ExtensionCollection`1<(class System.ServiceModel.IExtensibleObject`1<!T>) T> extends System.Collections.Generic.SynchronizedCollection`1<class System.ServiceModel.IExtension`1<!T>> implements class System.Collections.Generic.ICollection`1<class System.ServiceModel.IExtension`1<!T>>, class System.Collections.Generic.IEnumerable`1<class System.ServiceModel.IExtension`1<!T>>, class System.Collections.IEnumerable, class System.ServiceModel.IExtensionCollection`1<!T>"
  />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <InterfaceName>System.ServiceModel.IExtensibleObject<T></InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName
      >System.Collections.Generic.SynchronizedCollection<System.ServiceModel.IExtension<T>></BaseTypeName
    >
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">System.ServiceModel.IExtension<T></BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName
        >System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>></InterfaceName
      >
    </Interface>
    <Interface>
      <InterfaceName
        >System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>></InterfaceName
      >
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.IExtensionCollection<T></InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >Typically, implementations of <see
         cref="T:System.ServiceModel.IExtensibleObject`1" />

         return an <see
         cref="T:System.ServiceModel.ExtensionCollection`1" />

         from the <see
         cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" />

         property.</para
      >
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Represents a collection of extensions.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExtensionCollection (T owner);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T owner) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="T" />
      </Parameters>
      <Docs>
        <param name="owner">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public ExtensionCollection (T owner, object syncRoot);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T owner, object syncRoot) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="T" />
        <Parameter Name="syncRoot" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="owner">To be added.</param>
        <param name="syncRoot">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method familyhidebysig virtual instance void ClearItems() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find<E>">
      <MemberSignature Language="C#" Value="public E Find<E> ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance !!E Find<E>() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>E</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="E" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns an extension if it is in the collection.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >An extension of the type sought, or null if no extensions implement the type. If more than one extension implements the type, the most recently added is returned.</para
          >
        </returns>
        <typeparam name="E">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of extension sought.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FindAll<E>">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.ObjectModel.Collection<E> FindAll<E> ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance class System.Collections.ObjectModel.Collection`1<!!E> FindAll<E>() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection<E></ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="E" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Returns a collection of extensions if found in the collection.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A collection of extensions of the type sought. If no extensions implement this type, a non-null empty collection is returned.</para
          >
        </returns>
        <typeparam name="E">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type for which the collection of extensions is sought.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature
        Language="C#"
        Value="protected override void InsertItem (int index, System.ServiceModel.IExtension<T> item);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method familyhidebysig virtual instance void InsertItem(int32 index, class System.ServiceModel.IExtension`1<!T> item) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.ServiceModel.IExtension<T>" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature
        Language="C#"
        Value="protected override void SetItem (int index, System.ServiceModel.IExtension<T> item);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method familyhidebysig virtual instance void SetItem(int32 index, class System.ServiceModel.IExtension`1<!T> item) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.ServiceModel.IExtension<T>" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member
      MemberName="System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.IsReadOnly"
    >
      <MemberSignature
        Language="C#"
        Value="bool System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.IsReadOnly { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance bool System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>.IsReadOnly"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
