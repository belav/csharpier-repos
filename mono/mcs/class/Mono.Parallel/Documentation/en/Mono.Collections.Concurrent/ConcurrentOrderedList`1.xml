<Type
  Name="ConcurrentOrderedList<T>"
  FullName="Mono.Collections.Concurrent.ConcurrentOrderedList<T>"
>
  <TypeSignature
    Language="C#"
    Value="public class ConcurrentOrderedList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>"
  />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit ConcurrentOrderedList`1<T> extends System.Object implements class System.Collections.Generic.ICollection`1<!T>, class System.Collections.Generic.IEnumerable`1<!T>, class System.Collections.IEnumerable"
  />
  <AssemblyInfo>
    <AssemblyName>Mono.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type of elements in the list.</typeparam>
    <summary>Provide a concurrent thread-safe implementation of a linked-list that keeps elements in order.</summary>
    <remarks>This collection doesn't support duplicate elements with the same hash.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConcurrentOrderedList ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialize a new instance of ConcurrentOrderedList that is empty and use a default equality comparer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public ConcurrentOrderedList (System.Collections.Generic.IEqualityComparer<T> comparer);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1<!T> comparer) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer<T>" />
      </Parameters>
      <Docs>
        <param name="comparer">Comparer used to determine elements hash and equality.</param>
        <summary>Initialize a new instance of ConcurrentOrderedList that is empty and use a provided equality comparer.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void Clear() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature
        Language="C#"
        Value="public System.Collections.Generic.IEqualityComparer<T> Comparer { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance class System.Collections.Generic.IEqualityComparer`1<!T> Comparer"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the comparer used in this instance of ConcurrentOrderedList.</summary>
        <value>Comparer currently used.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T data);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance bool Contains(!T data) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="T" />
      </Parameters>
      <Docs>
        <param name="data">The data to locate in the list.</param>
        <summary>Checks if the supplied element is in the ConcurrentOrderedList.</summary>
        <returns>
          <see langword="true" />

           if the item is found, <see
           langword="false" />

           otherwise.</returns
        >
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ContainsHash">
      <MemberSignature Language="C#" Value="public bool ContainsHash (int key);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance bool ContainsHash(int32 key) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Hash value to check.</param>
        <summary>Checks if the supplied hash corresponds to an element in the ConcurrentOrderedList.</summary>
        <returns>
          <see langword="true" />

           if an item corresponding to the given hash is found, <see
           langword="false" />

           otherwise.</returns
        >
        <remarks
          >A call to <see
           cref="M:ConcurrentOrderedList<T>.Contains()" />

           is equivalent to calling this method using the <see
           cref="T:System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)" />

           method with <see
           cref="P:ConcurrentOrderedList<T>.Comparer" />

          .</remarks
        >
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int startIndex);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 startIndex) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="startIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<T>.Add">
      <MemberSignature Language="C#" Value="void ICollection<T>.Add (T item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection<T>.Add(!T item) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<T>.IsReadOnly">
      <MemberSignature
        Language="C#"
        Value="bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance bool System.Collections.Generic.ICollection<T>.IsReadOnly"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection<T>.Remove">
      <MemberSignature Language="C#" Value="bool ICollection<T>.Remove (T item);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection<T>.Remove(!T item) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable<T>.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1<!T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature
        Language="C#"
        Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd">
      <MemberSignature Language="C#" Value="public bool TryAdd (T data);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance bool TryAdd(!T data) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="T" />
      </Parameters>
      <Docs>
        <param name="data">Data to add in the collection.</param>
        <summary>Try to add an element to the collection.</summary>
        <returns
          >True if the insertion was successful, <see
           langword="false" />

           otherwise.</returns
        >
        <remarks>This method add the supplied element only if there is no other element with an identical hash already in the list.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFromHash">
      <MemberSignature Language="C#" Value="public bool TryGetFromHash (int key, out T data);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance bool TryGetFromHash(int32 key, !T data) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
        <Parameter Name="data" Type="T&" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove">
      <MemberSignature Language="C#" Value="public bool TryRemove (T data);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance bool TryRemove(!T data) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="T" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveHash">
      <MemberSignature Language="C#" Value="public bool TryRemoveHash (int key, out T data);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance bool TryRemoveHash(int32 key, !T data) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Int32" />
        <Parameter Name="data" Type="T&" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
