<?xml version="1.0" encoding="utf-8"?>
<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object"
  />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</para>
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para>Provides lazy initialization routines.</para>
    </summary>
  </Docs>
  <Members>
    <Member MemberName="EnsureInitialized<T>">
      <MemberSignature
        Language="C#"
        Value="public static T EnsureInitialized<T> (ref T target) where T : class;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!T EnsureInitialized<class T>(!!T target) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized<T>">
      <MemberSignature
        Language="C#"
        Value="public static T EnsureInitialized<T> (ref T target, Func<T> valueFactory) where T : class;"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!T EnsureInitialized<class T>(!!T target, class System.Func`1<!!T> valueFactory) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func<T>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized<T>">
      <MemberSignature
        Language="C#"
        Value="public static T EnsureInitialized<T> (ref T target, ref bool initialized, ref object syncLock);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!T EnsureInitialized<T>(!!T target, bool initialized, object syncLock) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="initialized">To be added.</param>
        <param name="syncLock">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized<T>">
      <MemberSignature
        Language="C#"
        Value="public static T EnsureInitialized<T> (ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public static hidebysig !!T EnsureInitialized<T>(!!T target, bool initialized, object syncLock, class System.Func`1<!!T> valueFactory) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T&" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean&" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object&" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func<T>" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="initialized">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
