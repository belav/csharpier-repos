<?xml version="1.0" encoding="utf-8"?>
<Type Name="Progress<T>" FullName="System.Progress<T>">
  <TypeSignature Language="C#" Value="public class Progress<T> : IProgress<T>" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit Progress`1<T> extends System.Object implements class System.IProgress`1<!T>"
  />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IProgress<T></InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >Any handler provided to the constructor or event handlers registered with the <see
         cref="E:System.Progress`1.ProgressChanged" />

         event are invoked through a <see
         cref="T:System.Threading.SynchronizationContext" />

         instance captured when the instance is constructed. If there is no current <see
         cref="T:System.Threading.SynchronizationContext" />

         at the time of construction, the callbacks will be invoked on the <see
         cref="T:System.Threading.ThreadPool" />

        .</para
      >
      <para
        >For more information and a code example, see the article <see
         cref="http://go.microsoft.com/fwlink/p/?LinkId=267243"
          >Async in 4.5: Enabling Progress and Cancellation in Async APIs</see
        >

         in the .NET Framework blog.</para
      >
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >Provides an <see
         cref="T:System.IProgress`1" />

         that invokes callbacks for each reported progress value.</para
      >
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Progress ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes the <see
             cref="T:System.Progress`1" />

             object.</para
          >
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Progress (Action<T> handler);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1<!T> handler) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Action<T>" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReport">
      <MemberSignature Language="C#" Value="protected virtual void OnReport (T value);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method familyhidebysig newslot virtual instance void OnReport(!T value) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event EventHandler<T> ProgressChanged;" />
      <MemberSignature
        Language="ILAsm"
        Value=".event class System.EventHandler`1<!T> ProgressChanged"
      />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler<T></ReturnType>
      </ReturnValue>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Handlers registered with this event will be invoked on the <see
             cref="T:System.Threading.SynchronizationContext" />

             captured when the instance was constructed.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Raised for each reported progress value.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="System.IProgress<T>.Report">
      <MemberSignature Language="C#" Value="void IProgress<T>.Report (T value);" />
      <MemberSignature
        Language="ILAsm"
        Value=".method hidebysig newslot virtual instance void System.IProgress<T>.Report(!T value) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
