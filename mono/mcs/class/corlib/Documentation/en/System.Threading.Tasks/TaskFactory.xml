<?xml version="1.0" encoding="utf-8"?>
<Type Name="TaskFactory" FullName="System.Threading.Tasks.TaskFactory">
  <TypeSignature Language="C#" Value="public class TaskFactory" />
  <TypeSignature
    Language="ILAsm"
    Value=".class public auto ansi beforefieldinit TaskFactory extends System.Object"
  />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <remarks>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >The <see
         cref="T:System.Threading.Tasks.TaskFactory" />

         class encodes some common <see
         cref="T:System.Threading.Tasks.Task" />

         patterns into methods that pick up default settings, which are configurable through its constructors. A default instance of <see
         cref="T:System.Threading.Tasks.TaskFactory" />

         is available through the <see
         cref="P:System.Threading.Tasks.Task.Factory" />

         property.</para
      >
    </remarks>
    <summary>
      <attribution license="cc4" from="Microsoft" modified="false" />
      <para
        >Provides support for creating and scheduling <see
         cref="T:System.Threading.Tasks.Task" />

         objects.</para
      >
    </summary>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskFactory ();" />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This constructor creates a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with a default configuration. The <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.None" />

            , the <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />

            , and the <see
             cref="T:System.Threading.Tasks.TaskScheduler" />

             property is initialized to the current scheduler (see <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

            ).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with the default configuration.</para
          >
        </summary>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public TaskFactory (System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This constructor creates a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with a default configuration. The <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.None" />

            , the <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />

            , and the <see
             cref="T:System.Threading.Tasks.TaskScheduler" />

             property is initialized to the current scheduler (see <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

            ).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with the specified configuration.</para
          >
        </summary>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to tasks created by this <see
           cref="T:System.Threading.Tasks.TaskFactory" />

           unless another CancellationToken is explicitly specified while calling the factory methods.</param
        >
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >With this constructor, the <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.None" />

            , the <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

             property is initialized to <see
             cref="F:System.Threading.Tasks.TaskContinuationOptions.None" />

            , and the <see
             cref="T:System.Threading.Tasks.TaskScheduler" />

             property is initialized to <paramref
             name="scheduler" />

            , unless it's null, in which case the property is initialized to the current scheduler (see <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

            ).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with the specified configuration.</para
          >
        </summary>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</param
        >
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >With this constructor, the <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             property is initialized to <paramref
             name="creationOptions" />

            , the <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

             property is initialized to <paramref
             name="continuationOptions" />

            , and the <see
             cref="T:System.Threading.Tasks.TaskScheduler" />

             property is initialized to the current scheduler (see <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

            ).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with the specified configuration.</para
          >
        </summary>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="T:System.Threading.Tasks.TaskCreationOptions" />

           to use when creating tasks with this TaskFactory.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           to use when creating continuation tasks with this TaskFactory.</param
        >
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature
        Language="C#"
        Value="public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >With this constructor, the <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             property is initialized to <paramref
             name="creationOptions" />

            , the <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

             property is initialized to <paramref
             name="continuationOptions" />

            , and the <see
             cref="T:System.Threading.Tasks.TaskScheduler" />

             property is initialized to <paramref
             name="scheduler" />

            , unless it's null, in which case the property is initialized to the current scheduler (see <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

            ).</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Initializes a <see
             cref="T:System.Threading.Tasks.TaskFactory" />

             instance with the specified configuration.</para
          >
        </summary>
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to tasks created by this <see
           cref="T:System.Threading.Tasks.TaskFactory" />

           unless another CancellationToken is explicitly specified while calling the factory methods.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="T:System.Threading.Tasks.TaskCreationOptions" />

           to use when creating tasks with this TaskFactory.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           to use when creating continuation tasks with this TaskFactory.</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The default <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</param
        >
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.CancellationToken CancellationToken { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance valuetype System.Threading.CancellationToken CancellationToken"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This property returns the default <see
             cref="T:System.Threading.CancellationToken" />

             that will be assigned to all tasks created by this factory, unless another <see
             cref="T:System.Threading.CancellationToken" />

             value is explicitly specified during the call to the factory methods.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default cancellation token for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinuationOptions">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance valuetype System.Threading.Tasks.TaskContinuationOptions ContinuationOptions"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskContinuationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to create all continuation tasks, unless other options are explicitly specified during calls to this factory's methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task continuation options for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task[]> continuationAction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task[]>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <see
             cref="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})" />

             method executes the <paramref
             name="continuationAction" />

             delegate when all tasks in the <paramref
             name="tasks" />

             array have completed, regardless of their completion status. </para
          >
          <para
            >Exceptions thrown by tasks in the <paramref
             name="tasks" />

             array are not available to the continuation task through structured exception handling. You can determine which exceptions were thrown by examining the <see
             cref="P:System.Threading.Tasks.Task.Exception" />

             property of each task in the <paramref
             name="tasks" />

             array. To use structured exception handling to handle exceptions thrown by tasks in the <paramref
             name="tasks" />

             array, call the <see
             cref="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />

             method. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed. </para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task[]> continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task[]>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <see
             cref="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)" />

             method executes the <paramref
             name="continuationAction" />

             delegate when all tasks in the <paramref
             name="tasks" />

             array have completed, regardless of their completion status. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task[]> continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task[]>" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task[]> continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task[]>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation toke to assign to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task.</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The object that is used to schedule the new continuation task.</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[]> continuationAction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[]> continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[]> continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>[]> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAll<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[]> continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The object that is used to schedule the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task[], !!TResult> continuationFunction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task[],TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task[], !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task[],TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task[], !!TResult> continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task[],TResult>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task[], !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task[],TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The object that is used to schedule the new continuation task.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[], !!TResult> continuationFunction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[], !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[], !!TResult> continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAll<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAll<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>[], !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates a continuation task that starts when a set of specified tasks has completed.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The new continuation task.</para>
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when all tasks in the <paramref
           name="tasks" />

           array have completed.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The cancellation token to assign to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The object that is used to schedule the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created task.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task> continuationAction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task>" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task> continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task> continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task>" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny(class System.Threading.Tasks.Task[] tasks, class System.Action`1<class System.Threading.Tasks.Task> continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="continuationAction" Type="System.Action<System.Threading.Tasks.Task>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created continuation <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>> continuationAction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>> continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>> continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Action<System.Threading.Tasks.Task<TAntecedentResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWhenAny<TAntecedentResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Action`1<class System.Threading.Tasks.Task`1<!!TAntecedentResult>> continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationAction"
          Type="System.Action<System.Threading.Tasks.Task<TAntecedentResult>>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationAction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task, !!TResult> continuationFunction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task, !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task,TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task, !!TResult> continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task,TResult>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TResult> (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TResult>(class System.Threading.Tasks.Task[] tasks, class System.Func`2<class System.Threading.Tasks.Task, !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task,TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>, !!TResult> continuationFunction) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>"
        />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>, !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>To be added.</remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>, !!TResult> continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>"
        />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="ContinueWhenAny<TAntecedentResult,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult,TResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> ContinueWhenAny<TAntecedentResult, TResult>(class System.Threading.Tasks.Task`1<!!TAntecedentResult>[] tasks, class System.Func`2<class System.Threading.Tasks.Task`1<!!TAntecedentResult>, !!TResult> continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAntecedentResult" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task<TAntecedentResult>[]" />
        <Parameter
          Name="continuationFunction"
          Type="System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>"
        />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter
          Name="continuationOptions"
          Type="System.Threading.Tasks.TaskContinuationOptions"
        />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The NotOn* and OnlyOn* <see
             cref="T:System.Threading.Tasks.TaskContinuationOptions" />

            , which constrain for which <see
             cref="T:System.Threading.Tasks.TaskStatus" />

             states a continuation will be executed, are illegal with ContinueWhenAny.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

             that will be started upon the completion of any Task in the provided set.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The new continuation <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="tasks">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The array of tasks from which to continue when one task completes.</param
        >
        <param name="continuationFunction">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate to execute asynchronously when one task in the <paramref
           name="tasks" />

           array completes.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.CancellationToken" />

           that will be assigned to the new continuation task.</param
        >
        <param name="continuationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskContinuationOptions" />

           value that controls the behavior of the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created continuation <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TAntecedentResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result of the antecedent <paramref
           name="tasks" />

          .</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result that is returned by the <paramref
           name="continuationFunction" />

           delegate and associated with the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to create all tasks, unless other options are explicitly specified during calls to this factory's methods.</para>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task creation options for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1<class System.IAsyncResult> endMethod) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that executes an end method action when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3<class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on.  This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1<class System.IAsyncResult> endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that executes an end method action when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.Func`3<class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            . The <see
             cref="T:System.Threading.Tasks.TaskCreationOptions" />

             values <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness" />

            , <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.LongRunning" />

             and <see
             cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" />

             are all mutually exclusive. In the FromAsync methods, either LongRunning or AttachedToParent by themselves will cause an <see
             cref="T:System.ArgumentOutOfRangeException" />

             to be thrown.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync (IAsyncResult asyncResult, Action<IAsyncResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync(class System.IAsyncResult asyncResult, class System.Action`1<class System.IAsyncResult> endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that executes an end method action when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the task that executes the end method.</param
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1>(class System.Func`4<!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1>(class System.Func`4<!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TResult>(class System.IAsyncResult asyncResult, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that executes an end method function when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TResult>(class System.Func`3<class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TResult>(class System.IAsyncResult asyncResult, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that executes an end method function when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TResult>(class System.Func`3<class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TResult> (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TResult>(class System.IAsyncResult asyncResult, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <block subset="none" type="note">
            <para
              >The <see
               cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

               overloads that take an <paramref
               name="asyncResult" />

               parameter are not as efficient as the overloads that take a <paramref
               name="beginMethod" />

               parameter. If performance is an issue, use the overloads that provide the <paramref
               name="beginMethod" />

              /<paramref
               name="endMethod" />

               pattern.</para
            >
          </block>
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that executes an end method function when a specified <see
             cref="T:System.IAsyncResult" />

             completes.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >A <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="asyncResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The IAsyncResult whose completion should trigger the processing of the <paramref
           name="endMethod" />

          .</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The function delegate that processes the completed <paramref
           name="asyncResult" />

          .</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the task that executes the end method.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(class System.Func`5<!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1, TArg2>(class System.Func`5<!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TResult>(class System.Func`4<!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TResult> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TResult>(class System.Func`4<!!TArg1, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TArg3>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>(class System.Func`6<!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The third argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the third argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TArg3>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task FromAsync<TArg1, TArg2, TArg3>(class System.Func`6<!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Action`1<class System.IAsyncResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Action<System.IAsyncResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The third argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the third argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TArg2, TResult>(class System.Func`5<!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TResult> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TArg2, TResult>(class System.Func`5<!!TArg1, !!TArg2, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TArg3,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(class System.Func`6<!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The third argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the third argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="FromAsync<TArg1,TArg2,TArg3,TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3,TResult> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(class System.Func`6<!!TArg1, !!TArg2, !!TArg3, class System.AsyncCallback, object, class System.IAsyncResult> beginMethod, class System.Func`2<class System.IAsyncResult, !!TResult> endMethod, !!TArg1 arg1, !!TArg2 arg2, !!TArg3 arg3, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TArg1" />
        <TypeParameter Name="TArg2" />
        <TypeParameter Name="TArg3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter
          Name="beginMethod"
          Type="System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>"
        />
        <Parameter Name="endMethod" Type="System.Func<System.IAsyncResult,TResult>" />
        <Parameter Name="arg1" Type="TArg1" />
        <Parameter Name="arg2" Type="TArg2" />
        <Parameter Name="arg3" Type="TArg3" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The <paramref
             name="beginMethod" />

             delegate is started on the thread that <see
             cref="Overload:System.Threading.Tasks.TaskFactory.FromAsync" />

             is running on. This method throws any exceptions thrown by the <paramref
             name="beginMethod" />

            .</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates a <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The created <see
             cref="T:System.Threading.Tasks.Task`1" />

             that represents the asynchronous operation.</para
          >
        </returns>
        <param name="beginMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that begins the asynchronous operation.</param
        >
        <param name="endMethod">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The delegate that ends the asynchronous operation.</param
        >
        <param name="arg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The first argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The second argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="arg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The third argument passed to the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="beginMethod" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TArg1">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the second argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg2">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the third argument passed to <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TArg3">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the first argument passed to the <paramref
           name="beginMethod" />

           delegate.</typeparam
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="Scheduler">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.TaskScheduler Scheduler { get; }"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".property instance class System.Threading.Tasks.TaskScheduler Scheduler"
      />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <value>To be added.</value>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The property value is used to schedule all tasks, unless another scheduler is explicitly specified during calls to this factory's methods. </para>
          <para
            >If this property value is null, the value of the <see
             cref="P:System.Threading.Tasks.TaskScheduler.Current" />

             property is used.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Gets the default task scheduler for this task factory.</para>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action action);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling <see
             cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)" />

             is functionally equivalent to creating a task by using one of its constructors, and then calling the <see
             cref="M:System.Threading.Tasks.Task.Start" />

             method to schedule the task for execution. Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>Creates and starts a task.</para>
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para>The started task.</para>
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution. Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new task.</param
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action<object> action, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1<object> action, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action<System.Object>" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            >Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="action" />

           delegate.</param
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1<object> action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action<System.Object>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="action" />

           delegate.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1<object> action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action<System.Object>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="action" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task StartNew (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task StartNew(class System.Action`1<object> action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action<System.Object>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a Task using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as  a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog. </para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task" />

            .</para
          >
        </returns>
        <param name="action">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The action delegate to execute asynchronously.</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="action" />

           delegate.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new task.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created <see
           cref="T:System.Threading.Tasks.Task" />

          .</param
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`1<!!TResult> function) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<TResult>" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`2<object, !!TResult> function, object state) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<System.Object,TResult>" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="function" />

           delegate.</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`1<!!TResult> function, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<TResult>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`1<!!TResult> function, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<TResult>" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`2<object, !!TResult> function, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<System.Object,TResult>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="function" />

           delegate.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new <see
           cref="T:System.Threading.Tasks.Task" />
        </param>
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`2<object, !!TResult> function, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<System.Object,TResult>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="function" />

           delegate.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`1<!!TResult> function, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<TResult>" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new task.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
    <Member MemberName="StartNew<TResult>">
      <MemberSignature
        Language="C#"
        Value="public System.Threading.Tasks.Task<TResult> StartNew<TResult> (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);"
      />
      <MemberSignature
        Language="ILAsm"
        Value=".method public hidebysig instance class System.Threading.Tasks.Task`1<!!TResult> StartNew<TResult>(class System.Func`2<object, !!TResult> function, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed"
      />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func<System.Object,TResult>" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <remarks>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Calling StartNew is functionally equivalent to creating a <see
             cref="T:System.Threading.Tasks.Task`1" />

             using one of its constructors and then calling <see
             cref="M:System.Threading.Tasks.Task.Start" />

             to schedule it for execution.</para
          >
          <para
            > Starting with the net_v45, you can use the <see
             cref="Overload:System.Threading.Tasks.Task.Run" />

             method with an <see
             cref="System.Action" />

             object as a quick way to call <see
             cref="Overload:System.Threading.Tasks.TaskFactory.StartNew" />

             with default parameters. For more information and code examples, see the entry <see
             cref="http://blogs.msdn.com/b/pfxteam/archive/2011/10/24/10229468.aspx"
              >Task.Run vs. Task.Factory.StartNew</see
            >

             in the Parallel Programming with .NET blog.</para
          >
        </remarks>
        <summary>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >Creates and starts a <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </summary>
        <returns>
          <attribution license="cc4" from="Microsoft" modified="false" />
          <para
            >The started <see
             cref="T:System.Threading.Tasks.Task`1" />

            .</para
          >
        </returns>
        <param name="function">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A function delegate that returns the future result to be available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="state">
          <attribution license="cc4" from="Microsoft" modified="false" />

          An object containing data to be used by the <paramref
           name="function" />

           delegate.</param
        >
        <param name="cancellationToken">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />

           that will be assigned to the new task.</param
        >
        <param name="creationOptions">
          <attribution license="cc4" from="Microsoft" modified="false" />

          A TaskCreationOptions value that controls the behavior of the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <param name="scheduler">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The <see
           cref="T:System.Threading.Tasks.TaskScheduler" />

           that is used to schedule the created <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</param
        >
        <typeparam name="TResult">
          <attribution license="cc4" from="Microsoft" modified="false" />

          The type of the result available through the <see
           cref="T:System.Threading.Tasks.Task`1" />

          .</typeparam
        >
      </Docs>
    </Member>
  </Members>
</Type>
