<Project>
    <ItemGroup>
        <TestConsoleAppSourceFiles Condition="'@(TestConsoleAppSourceFiles)' == ''" Include="$(MSBuildProjectDirectory)\*.cs" />
        <TestSupportFiles Include="$(MSBuildThisFileDirectory)SupportFiles\Directory.Build.*">
            <DestinationFolder>$(TrimmingTestDir)</DestinationFolder>
        </TestSupportFiles>
    </ItemGroup>
    <Target Name="CreateTestDir" Inputs="@(TestSupportFiles)" Outputs="@(TestSupportFiles-&gt;'%(DestinationFolder)\%(FileName)%(Extension)')">
        <MakeDir Directories="%(TestSupportFiles.DestinationFolder)" />
        <Copy SourceFiles="@(TestSupportFiles)" DestinationFolder="%(TestSupportFiles.DestinationFolder)" />
    </Target>
    <Target Name="GetTestConsoleApps">
        <ItemGroup>
            <TestConsoleAppSourceFiles>
                <ProjectDir>$([MSBuild]::NormalizeDirectory('$(TrimmingTestProjectsDir)', '$(MSBuildProjectName)', '%(Filename)', '$(PackageRID)'))</ProjectDir>
                <TestRuntimeIdentifier>$(PackageRID)</TestRuntimeIdentifier>
                <TargetFramework>$(NetCoreAppCurrent)</TargetFramework>
                <TargetFramework Condition="'%(TestConsoleAppSourceFiles.TargetOS)' != ''">$(NetCoreAppCurrent)-%(TestConsoleAppSourceFiles.TargetOS)</TargetFramework>
            </TestConsoleAppSourceFiles>
            <!-- We need to separate Item metadata declaration in two in order to be able to use ProjectDir and TestRuntimeIdentifier below -->
            <TestConsoleAppSourceFiles>
                <ProjectFile>%(ProjectDir)project.csproj</ProjectFile>
                <TestCommand Condition="'$(TargetArchitecture)' != 'wasm' or '$(TargetOS)' != 'Browser'">$([MSBuild]::NormalizePath('%(ProjectDir)', 'bin', '$(Configuration)', '%(TargetFramework)', '%(TestRuntimeIdentifier)', 'publish', 'project'))</TestCommand>
                <TestCommand Condition="'$(TargetArchitecture)' == 'wasm' and '$(TargetOS)' == 'Browser'">$([MSBuild]::NormalizePath('%(ProjectDir)', 'bin', '$(Configuration)', '%(TargetFramework)', '%(TestRuntimeIdentifier)', 'AppBundle', 'run-v8.sh'))</TestCommand>
                <TestExecutionDirectory Condition="'$(TargetArchitecture)' != 'wasm' or '$(TargetOS)' != 'Browser'">$([MSBuild]::NormalizeDirectory('%(ProjectDir)', 'bin', '$(Configuration)', '%(TargetFramework)', '%(TestRuntimeIdentifier)', 'publish'))</TestExecutionDirectory>
                <TestExecutionDirectory Condition="'$(TargetArchitecture)' == 'wasm' and '$(TargetOS)' == 'Browser'">$([MSBuild]::NormalizeDirectory('%(ProjectDir)', 'bin', '$(Configuration)', '%(TargetFramework)', '%(TestRuntimeIdentifier)', 'AppBundle'))</TestExecutionDirectory>
            </TestConsoleAppSourceFiles>
        </ItemGroup>
        <ItemGroup Condition="!$(SkipOnTestRuntimes.Contains('$(PackageRID)'))">
            <TestConsoleApps Include="@(TestConsoleAppSourceFiles-&gt;'%(ProjectFile)')" Condition="!$([System.String]::Copy('%(TestConsoleAppSourceFiles.SkipOnTestRuntimes)').Contains('$(PackageRID)'))">
                <ProjectCompileItems>%(FullPath)</ProjectCompileItems>
            </TestConsoleApps>
            <TestConsoleApps AdditionalProperties="MSBuildEnableWorkloadResolver=$(MSBuildEnableWorkloadResolver)" Condition="'$(MSBuildEnableWorkloadResolver)' != ''" />
        </ItemGroup>
    </Target>
    <Target Name="GenerateProjects" DependsOnTargets="GetTestConsoleApps;CreateTestDir" Inputs="@(TestConsoleAppSourceFiles);$(ProjectTemplate);@(TestSupportFiles)" Outputs="%(TestConsoleApps.Identity)">
        <PropertyGroup>
            <_projectDir>%(TestConsoleApps.ProjectDir)\</_projectDir>
            <_projectFile>%(TestConsoleApps.ProjectFile)</_projectFile>
            <_projectSourceFile>%(TestConsoleApps.ProjectCompileItems)</_projectSourceFile>
        </PropertyGroup>
        <ItemGroup Condition="'$(AdditionalProjectReferences)' != ''">
            <_additionalProjectReferenceTemp Include="$(AdditionalProjectReferences)" />
            <_additionalProjectReference Include="&lt;ProjectReference Include=&quot;$(LibrariesProjectRoot)%(_additionalProjectReferenceTemp.Identity)\src\%(_additionalProjectReferenceTemp.Identity).csproj&quot; SkipUseReferenceAssembly=&quot;true&quot; /&gt;" />
        </ItemGroup>
        <PropertyGroup>
            <_additionalProjectReferencesString>@(_additionalProjectReference, '%0a')</_additionalProjectReferencesString>
        </PropertyGroup>
        <ItemGroup>
            <_additionalProjectSourceFiles Include="%(TestConsoleApps.AdditionalSourceFiles)" />
        </ItemGroup>
        <ItemGroup>
            <_switchesAsItems Include="%(TestConsoleApps.DisabledFeatureSwitches)" Value="false" />
            <_switchesAsItems Include="%(TestConsoleApps.EnabledFeatureSwitches)" Value="true" />
            <_propertiesAsItems Include="%(TestConsoleApps.DisabledProperties)" Value="false" />
            <_propertiesAsItems Include="%(TestConsoleApps.EnabledProperties)" Value="true" />
        </ItemGroup>
        <PropertyGroup>
            <_runtimeHostConfigurationOptionsString>@(_switchesAsItems-&gt;'&lt;RuntimeHostConfigurationOption Include="%(Identity)" Value="%(Value)" Trim="true" /&gt;', '%0a    ')</_runtimeHostConfigurationOptionsString>
            <_additionalPropertiesString>@(_propertiesAsItems-&gt;'&lt;%(Identity)&gt;%(Value)&lt;/%(Identity)&gt;', '%0a    ')</_additionalPropertiesString>
        </PropertyGroup>
        <MakeDir Directories="$(_projectDir)" />
        <WriteLinesToFile File="$(_projectFile)" Lines="$([System.IO.File]::ReadAllText('$(ProjectTemplate)')&#xD;&#xA;                                                 .Replace('{TargetFramework}', '%(TestConsoleApps.TargetFramework)')&#xD;&#xA;                                                 .Replace('{NetCoreAppMaximumVersion}', '$(NetCoreAppMaximumVersion)')&#xD;&#xA;                                                 .Replace('{UseMonoRuntime}','$(UseMonoRuntime)')&#xD;&#xA;                                                 .Replace('{RuntimeIdentifier}','%(TestConsoleApps.TestRuntimeIdentifier)')&#xD;&#xA;                                                 .Replace('{PublishAot}','$(IsNativeAotTestProject)')&#xD;&#xA;                                                 .Replace('{MicrosoftNETILLinkTasksVersion}', '$(MicrosoftNETILLinkTasksVersion)')&#xD;&#xA;                                                 .Replace('{ExtraTrimmerArgs}', '%(TestConsoleApps.ExtraTrimmerArgs)')&#xD;&#xA;                                                 .Replace('{AdditionalProperties}', '$(_additionalPropertiesString)')&#xD;&#xA;                                                 .Replace('{IlcToolsPath}', '$(CoreCLRILCompilerDir)')&#xD;&#xA;                                                 .Replace('{IlcBuildTasksPath}', '$(CoreCLRILCompilerDir)netstandard/ILCompiler.Build.Tasks.dll')&#xD;&#xA;                                                 .Replace('{IlcSdkPath}', '$(CoreCLRAotSdkDir)')&#xD;&#xA;                                                 .Replace('{IlcFrameworkPath}', '$(MicrosoftNetCoreAppRuntimePackRidLibTfmDir)')&#xD;&#xA;                                                 .Replace('{IlcFrameworkNativePath}', '$(MicrosoftNetCoreAppRuntimePackNativeDir)')&#xD;&#xA;                                                 .Replace('{CoreCLRBuildIntegrationDir}', '$(CoreCLRBuildIntegrationDir)')&#xD;&#xA;                                                 .Replace('{RuntimeHostConfigurationOptions}', '$(_runtimeHostConfigurationOptionsString)')&#xD;&#xA;                                                 .Replace('{AdditionalProjectReferences}', '$(_additionalProjectReferencesString)')&#xD;&#xA;                                                 .Replace('{RepositoryEngineeringDir}', '$(RepositoryEngineeringDir)')&#xD;&#xA;                                                 .Replace('{MonoAOTCompilerDir}', '$(MonoAOTCompilerDir)')&#xD;&#xA;                                                 .Replace('{MonoProjectRoot}', '$(MonoProjectRoot)')&#xD;&#xA;                                                 .Replace('{MonoAOTCompilerTasksAssemblyPath}', '$(MonoAOTCompilerTasksAssemblyPath)')&#xD;&#xA;                                                 .Replace('{MonoTargetsTasksAssemblyPath}', '$(MonoTargetsTasksAssemblyPath)')&#xD;&#xA;                                                 .Replace('{WasmAppBuilderTasksAssemblyPath}', '$(WasmAppBuilderTasksAssemblyPath)')&#xD;&#xA;                                                 .Replace('{MicrosoftNetCoreAppRuntimePackRidDir}', '$(MicrosoftNetCoreAppRuntimePackRidDir)')&#xD;&#xA;                                                 .Replace('{ProductVersion}', '$(ProductVersion)')&#xD;&#xA;                                                 .Replace('{NetCoreAppCurrent}', '$(NetCoreAppCurrent)')&#xD;&#xA;                                                 .Replace('{NetCoreAppCurrentVersion}', '$(NetCoreAppCurrentVersion)')&#xD;&#xA;                                                 .Replace('{MicrosoftNetCoreAppFrameworkName}', '$(MicrosoftNetCoreAppFrameworkName)')&#xD;&#xA;                                                 .Replace('{MicrosoftNetCoreAppRefPackDir}', '$(MicrosoftNetCoreAppRefPackDir)')&#xD;&#xA;                                                 .Replace('{MicrosoftNetCoreAppRuntimePackDir}', '$(MicrosoftNetCoreAppRuntimePackDir)')&#xD;&#xA;                                                 .Replace('{AppHostSourcePath}', '$(AppHostSourcePath)')&#xD;&#xA;                                                 .Replace('{SingleFileHostSourcePath}', '$(SingleFileHostSourcePath)'))" Overwrite="true" />
        <Copy SourceFiles="$(_projectSourceFile);&#xD;&#xA;                       @(_additionalProjectSourceFiles)" DestinationFolder="$(_projectDir)" />
        <Message Text="Generated $(_projectFile)" />
    </Target>
    <Target Name="GetTrimmingProjectsToRestore" DependsOnTargets="GenerateProjects" Returns="@(TestConsoleApps)" />
    <Target Name="PublishTrimmedProjects" DependsOnTargets="GenerateProjects">
        <MSBuild Projects="@(TestConsoleApps)" Targets="Restore" Condition="'$(SkipTrimmingProjectsRestore)' != 'true'" Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid());Configuration=$(Configuration)" />
        <MSBuild Projects="@(TestConsoleApps)" Targets="Publish" Properties="Configuration=$(Configuration);BuildProjectReferences=false" />
    </Target>
    <Target Name="ExecuteApplications" DependsOnTargets="PublishTrimmedProjects" Inputs="%(TestConsoleApps.Identity)" Outputs="_unused" Condition="'$(ArchiveTests)' != 'true'">
        <Message Importance="High" Text="[Trimming Tests] Running test: %(TestConsoleApps.ProjectCompileItems) ..." />
        <Exec IgnoreExitCode="true" Command="%(TestConsoleApps.TestCommand)" StandardOutputImportance="Low" WorkingDirectory="%(TestConsoleApps.TestExecutionDirectory)">
            <Output TaskParameter="ExitCode" PropertyName="ExecutionExitCode" />
        </Exec>
        <Error Condition="'$(ExecutionExitCode)' != '100'" Text="Error: [Failed Test]: %(TestConsoleApps.ProjectCompileItems). The Command %(TestConsoleApps.TestCommand) return a non-success exit code." ContinueOnError="ErrorAndContinue" />
    </Target>
    <Target Name="Build" DependsOnTargets="ExecuteApplications" />
    <!-- define test to do nothing, for this project Build does all the testing -->
    <Target Name="Test" DependsOnTargets="Build" />
    <Target Name="VSTest" DependsOnTargets="Build" />
</Project>
