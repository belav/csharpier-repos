<Project>
    <PropertyGroup>
        <EnableLibraryImportGenerator Condition="'$(EnableLibraryImportGenerator)' == '' and&#xD;&#xA;                                             '$(MSBuildProjectName)' == 'System.Private.CoreLib'">true</EnableLibraryImportGenerator>
        <!-- Disable the library import generator when the project requires polyfill source files but doesn't have nullable reference types enabled. -->
        <EnableLibraryImportGenerator Condition="'$(EnableLibraryImportGenerator)' == '' and&#xD;&#xA;                                             !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0')) and&#xD;&#xA;                                             ('$(Nullable)' == 'disable' or '$(Nullable)' == '')">false</EnableLibraryImportGenerator>
    </PropertyGroup>
    <ItemGroup>
        <EnabledGenerators Include="LibraryImportGenerator" Condition="'$(EnableLibraryImportGenerator)' == 'true'" />
        <!-- If the current project is not System.Private.CoreLib, we enable the LibraryImportGenerator source generator
         when the project is a C# source project that:
         - doesn't target the latest TFM or
         - references everything from the targeting pack (OOB) or
         - references System.Private.CoreLib, or
         - references System.Runtime.InteropServices -->
        <EnabledGenerators Include="LibraryImportGenerator" Condition="'$(EnableLibraryImportGenerator)' == '' and&#xD;&#xA;                                  '$(IsSourceProject)' == 'true' and&#xD;&#xA;                                  '$(MSBuildProjectExtension)' == '.csproj' and&#xD;&#xA;                                  (&#xD;&#xA;                                    '$(TargetFrameworkMoniker)' != '$(NetCoreAppCurrentTargetFrameworkMoniker)' or&#xD;&#xA;                                    '$(DisableImplicitFrameworkReferences)' != 'true' or&#xD;&#xA;                                    (&#xD;&#xA;                                      '@(Reference)' != '' and&#xD;&#xA;                                      @(Reference-&gt;AnyHaveMetadataValue('Identity', 'System.Runtime.InteropServices'))&#xD;&#xA;                                    ) or&#xD;&#xA;                                    (&#xD;&#xA;                                      '@(ProjectReference)' != '' and&#xD;&#xA;                                      @(ProjectReference-&gt;AnyHaveMetadataValue('Identity', '$(CoreLibProject)'))&#xD;&#xA;                                    )&#xD;&#xA;                                  )" />
    </ItemGroup>
    <ItemGroup Condition="'@(EnabledGenerators)' != '' and&#xD;&#xA;                        @(EnabledGenerators-&gt;AnyHaveMetadataValue('Identity', 'LibraryImportGenerator')) and&#xD;&#xA;                        !$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net7.0'))">
        <Compile Include="$(CoreLibSharedDir)System\Runtime\InteropServices\LibraryImportAttribute.cs" />
        <Compile Include="$(CoreLibSharedDir)System\Runtime\InteropServices\StringMarshalling.cs" />
    </ItemGroup>
    <!-- Use this complex item list based filtering to add the ProjectReference to make sure dotnet/runtime stays compatible with NuGet Static Graph Restore.
       That is required as the EnabledGenerators condition checks on the Reference and ProjectReference items and hence can't be a property condition. -->
    <ItemGroup Condition="'@(EnabledGenerators)' != '' and&#xD;&#xA;                        @(EnabledGenerators-&gt;AnyHaveMetadataValue('Identity', 'LibraryImportGenerator'))">
        <ProjectReference Include="$(LibrariesProjectRoot)System.Runtime.InteropServices\gen\LibraryImportGenerator\LibraryImportGenerator.csproj;&#xD;&#xA;                               $(LibrariesProjectRoot)System.Runtime.InteropServices\gen\Microsoft.Interop.SourceGeneration\Microsoft.Interop.SourceGeneration.csproj" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />
    </ItemGroup>
    <Target Name="ConfigureGenerators" DependsOnTargets="ConfigureLibraryImportGenerator" BeforeTargets="CoreCompile" />
    <!-- Microsoft.Interop.LibraryImportGenerator -->
    <Target Name="ConfigureLibraryImportGenerator" Condition="'@(EnabledGenerators)' != '' and @(EnabledGenerators-&gt;AnyHaveMetadataValue('Identity', 'LibraryImportGenerator'))" DependsOnTargets="ResolveProjectReferences" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun">
        <PropertyGroup>
            <LibraryImportGenerator_UseMarshalType>true</LibraryImportGenerator_UseMarshalType>
        </PropertyGroup>
        <ItemGroup Condition="'$(NetCoreAppCurrentTargetFrameworkMoniker)' == '$(TargetFrameworkMoniker)' and '$(IncludeLibraryImportGeneratorSources)' != 'false'"></ItemGroup>
    </Target>
    <Import Project="$(LibrariesProjectRoot)System.Runtime.InteropServices\gen\LibraryImportGenerator\Microsoft.Interop.LibraryImportGenerator.props" />
</Project>
