<item>
  <title>WCF and eBay</title>
  <link>http://contoso.com/rss</link>
  <pubDate>Thu, 12 Oct 2006 16:20:00 Z</pubDate>
  <guid isPermaLink="false">91d46819-8472-40ad-a661-2c78acb4018c:820210</guid>
  <comments>http://contoso.com/test</comments>
  <description
    >
    <P>eBay provides a very rich, though very complicated, <A class="" href="http://contoso.com/developercenter/soap" mce_href="http://contoso.com/developercenter/soap">SOAP API</A>.&nbsp; It is possible to use WCF with eBay, but it takes a few tricks.&nbsp; First read <A class="" href="http://contoso.com/2006/04/18/21943.aspx" mce_href="http://contoso.com/2006/04/18/21943.aspx">this</A> article.&nbsp; I'll wait.&nbsp; Ok, since that didn't scare you away I'll continue.&nbsp; Everything there is still necessary except the custom message encoder for removing the quotes around the content type.&nbsp; In fact the basicHttpBinding produced by svcutil.exe is just fine, though bumping up some of the quotas (<FONT size=2>maxNameTableCharCount, <FONT size=2>maxBufferSize, <FONT size=2>maxReceivedMessageSize)</FONT></FONT></FONT>&nbsp;might not hurt.&nbsp; Now calling GeteBayOfficialTime just works, but graduating to say GetItem, there's another problem.&nbsp; GetItem returns a GetItemResponseType which derives from AbstractResponseType.&nbsp; After successfully calling GetItemResponseType, all the fields it inherits are correctly populated but the fields it defines haven't been.&nbsp; Looking at the response on the wire, those fields are there, for some reason they weren't deserialized.&nbsp; The problem is eBay defined the schema for AbstractResponseType with an xs:any, so the code generated for this type includes an array of XmlElements with the XmlAny attribute:</P><FONT size=2>
    <P>[System.Xml.Serialization.XmlAnyAttribute(Order=12)] </P>
    <P></FONT><FONT color=#0000ff size=2>public</FONT><FONT size=2> System.Xml.XmlElement[] Any</FONT></P>
    <P><FONT size=2>When the response from eBay arrives the XmlSerializer happily begins populating all the fields in AbstractResponseType and anything it doesn't recognize gets put into Any.&nbsp; Now when it's time to populate the fields defined in GetItemResponseType there's no xml left.&nbsp; Given this knowledge it's an easy fix, but unfortunately it involves manually editing the generated proxy.&nbsp; All that's necessary is to change the XmlAnyAttribute to an XmlIgnoreAttribute.&nbsp; Now upon receiving the response, the XmlSerializer "saves" any elements that don't map to AbstractResponseType and uses them to populate GetItemResponseType.</P></FONT><img src="http://contoso.com/images" width="1" height="1">
  </description
  >
</item>
